set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

file(GLOB SRC util/*.c* DP/*.c* FL/*.c* Tree/*.c* Encryption/*.c* objective/*.c* metric/*.c* *.c*)
list(REMOVE_ITEM SRC "${CMAKE_CURRENT_LIST_DIR}/main.cpp")


set(COMMON_INCLUDES ../include)
include_directories(${COMMON_INCLUDES})
include_directories(/usr/local/include/)
include_directories(/usr/include/openssl)


#set(DBoost_NO_SYSTEM_PATHS TRUE)
#set(Boost_NO_BOOST_CMAKE TRUE)
#set(BOOST_ROOT /home/zhaomin/software/boost)    # required on 3090
#set(Boost_LIBRARIES /home/zhaomin/software/boost/lib)
#set(Boost_INCLUDE_DIR /home/zhaomin/software/boost/include)
set(Boost_INCLUDE_DIR /usr/local/include)
set(Boost_LIBRARIES /usr/local/lib)
find_package(Boost COMPONENTS system filesystem serialization REQUIRED)
include_directories(${Boost_INCLUDE_DIR})
#find_package(TBB REQUIRED PATHS ${TBB_RELEASE})


find_package(OpenSSL REQUIRED)

find_library(NTL_LIB ntl)
if(NOT NTL_LIB)
    message(FATAL_ERROR "ntl library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif()
find_library(M_LIB m)
if(NOT M_LIB)
    message(FATAL_ERROR "m library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif()
find_library(GMP_LIB gmp)
if(NOT GMP_LIB)
    message(FATAL_ERROR "gmp library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif()

if (USE_CUDA)
    cuda_add_library(${PROJECT_NAME} SHARED ${SRC} MurmurHash3.cpp ../../include/FedTree/MurmurHash3.h)
    target_link_libraries(${PROJECT_NAME} ${CUDA_cusparse_LIBRARY} ${NTL_LIB} ${M_LIB} ${GMP_LIB}  ${Boost_LIBRARIES})
    cuda_add_executable(${PROJECT_NAME}-train main.cpp)
else ()
    add_library(${PROJECT_NAME} STATIC ${SRC} util/plot.cpp ../../include/FedTree/util/plot.h Tree/deltaboost_remover.cpp MurmurHash3.cpp ../../include/FedTree/MurmurHash3.h)
    #pybind11_add_module(${PROJECT_NAME} SHARED ${SRC})
    target_link_libraries(${PROJECT_NAME} ThrustOMP ${NTL_LIB} ${M_LIB} ${GMP_LIB} ${Boost_LIBRARIES} OpenSSL::SSL)
    add_executable(${PROJECT_NAME}-train main.cpp)
endif ()
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_link_libraries(${PROJECT_NAME} OpenMP::OpenMP_CXX ${Boost_LIBRARIES})
endif()
target_link_libraries(${PROJECT_NAME}-train ${PROJECT_NAME} ${Boost_LIBRARIES})

