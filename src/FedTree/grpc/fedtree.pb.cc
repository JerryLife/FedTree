// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedtree.proto

#include "fedtree.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace fedtree {
class PIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PID> _instance;
} _PID_default_instance_;
class ReadyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ready> _instance;
} _Ready_default_instance_;
class DatasetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatasetInfo> _instance;
} _DatasetInfo_default_instance_;
class GHPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GHPair> _instance;
} _GHPair_default_instance_;
class FIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FID> _instance;
} _FID_default_instance_;
class BestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BestInfo> _instance;
} _BestInfo_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class Ins2NodeIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ins2NodeID> _instance;
} _Ins2NodeID_default_instance_;
}  // namespace fedtree
static void InitDefaultsscc_info_BestInfo_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_BestInfo_default_instance_;
    new (ptr) ::fedtree::BestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BestInfo_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BestInfo_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_DatasetInfo_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_DatasetInfo_default_instance_;
    new (ptr) ::fedtree::DatasetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatasetInfo_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DatasetInfo_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_FID_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_FID_default_instance_;
    new (ptr) ::fedtree::FID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FID_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FID_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_GHPair_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_GHPair_default_instance_;
    new (ptr) ::fedtree::GHPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GHPair_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GHPair_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Ins2NodeID_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Ins2NodeID_default_instance_;
    new (ptr) ::fedtree::Ins2NodeID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ins2NodeID_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ins2NodeID_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Node_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Node_default_instance_;
    new (ptr) ::fedtree::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_PID_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_PID_default_instance_;
    new (ptr) ::fedtree::PID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PID_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PID_fedtree_2eproto}, {}};

static void InitDefaultsscc_info_Ready_fedtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fedtree::_Ready_default_instance_;
    new (ptr) ::fedtree::Ready();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ready_fedtree_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ready_fedtree_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fedtree_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fedtree_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fedtree_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fedtree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::PID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::PID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ready, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ready, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, n_bins_),
  PROTOBUF_FIELD_OFFSET(::fedtree::DatasetInfo, n_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::GHPair, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::FID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::FID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, nid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, idx_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, global_fid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::BestInfo, gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, final_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, lch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, rch_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, parent_index_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, gain_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, base_weight_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, split_feature_id_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, pid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, split_value_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, split_bid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, default_right_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, is_leaf_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, is_valid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, is_pruned_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, sum_gh_pair_g_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, sum_gh_pair_h_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Node, n_instances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, iid_),
  PROTOBUF_FIELD_OFFSET(::fedtree::Ins2NodeID, nid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fedtree::PID)},
  { 6, -1, sizeof(::fedtree::Ready)},
  { 12, -1, sizeof(::fedtree::DatasetInfo)},
  { 19, -1, sizeof(::fedtree::GHPair)},
  { 26, -1, sizeof(::fedtree::FID)},
  { 32, -1, sizeof(::fedtree::BestInfo)},
  { 42, -1, sizeof(::fedtree::Node)},
  { 64, -1, sizeof(::fedtree::Ins2NodeID)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_PID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Ready_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_DatasetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_GHPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_FID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_BestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fedtree::_Ins2NodeID_default_instance_),
};

const char descriptor_table_protodef_fedtree_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rfedtree.proto\022\007fedtree\"\021\n\003PID\022\n\n\002id\030\001 "
  "\001(\005\"\026\n\005Ready\022\r\n\005ready\030\001 \001(\010\"0\n\013DatasetIn"
  "fo\022\016\n\006n_bins\030\001 \001(\005\022\021\n\tn_columns\030\002 \001(\005\"\036\n"
  "\006GHPair\022\t\n\001g\030\001 \001(\001\022\t\n\001h\030\002 \001(\001\"\021\n\003FID\022\n\n\002"
  "id\030\001 \001(\005\"S\n\010BestInfo\022\013\n\003pid\030\001 \001(\005\022\013\n\003nid"
  "\030\002 \001(\005\022\013\n\003idx\030\003 \001(\005\022\022\n\nglobal_fid\030\004 \001(\005\022"
  "\014\n\004gain\030\005 \001(\001\"\326\002\n\004Node\022\020\n\010final_id\030\001 \001(\005"
  "\022\021\n\tlch_index\030\002 \001(\005\022\021\n\trch_index\030\003 \001(\005\022\024"
  "\n\014parent_index\030\004 \001(\005\022\014\n\004gain\030\005 \001(\002\022\023\n\013ba"
  "se_weight\030\006 \001(\002\022\030\n\020split_feature_id\030\007 \001("
  "\005\022\013\n\003pid\030\010 \001(\005\022\023\n\013split_value\030\t \001(\002\022\021\n\ts"
  "plit_bid\030\n \001(\005\022\025\n\rdefault_right\030\013 \001(\010\022\017\n"
  "\007is_leaf\030\014 \001(\010\022\020\n\010is_valid\030\r \001(\010\022\021\n\tis_p"
  "runed\030\016 \001(\010\022\025\n\rsum_gh_pair_g\030\017 \001(\002\022\025\n\rsu"
  "m_gh_pair_h\030\020 \001(\002\022\023\n\013n_instances\030\021 \001(\005\"&"
  "\n\nIns2NodeID\022\013\n\003iid\030\001 \001(\005\022\013\n\003nid\030\002 \001(\0052\333"
  "\005\n\007FedTree\0228\n\026TriggerUpdateGradients\022\014.f"
  "edtree.PID\032\016.fedtree.Ready\"\000\0222\n\020TriggerB"
  "uildInit\022\014.fedtree.PID\032\016.fedtree.Ready\"\000"
  "\0221\n\014GetGradients\022\014.fedtree.PID\032\017.fedtree"
  ".GHPair\"\0000\001\0227\n\017SendDatasetInfo\022\024.fedtree"
  ".DatasetInfo\032\014.fedtree.PID\"\000\0223\n\016SendHist"
  "ograms\022\017.fedtree.GHPair\032\014.fedtree.PID\"\000("
  "\001\022-\n\013SendHistFid\022\014.fedtree.FID\032\014.fedtree"
  ".PID\"\000(\001\0222\n\020TriggerAggregate\022\014.fedtree.P"
  "ID\032\016.fedtree.Ready\"\000\0222\n\013GetBestInfo\022\014.fe"
  "dtree.PID\032\021.fedtree.BestInfo\"\0000\001\022)\n\010Send"
  "Node\022\r.fedtree.Node\032\014.fedtree.PID\"\000\0227\n\016S"
  "endIns2NodeID\022\023.fedtree.Ins2NodeID\032\014.fed"
  "tree.PID\"\000(\001\022+\n\010GetNodes\022\014.fedtree.PID\032\r"
  ".fedtree.Node\"\0000\001\0226\n\rGetIns2NodeID\022\014.fed"
  "tree.PID\032\023.fedtree.Ins2NodeID\"\0000\001\0221\n\017Che"
  "ckIfContinue\022\014.fedtree.PID\032\016.fedtree.Rea"
  "dy\"\000\022.\n\014TriggerPrune\022\014.fedtree.PID\032\016.fed"
  "tree.Ready\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fedtree_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fedtree_2eproto_sccs[8] = {
  &scc_info_BestInfo_fedtree_2eproto.base,
  &scc_info_DatasetInfo_fedtree_2eproto.base,
  &scc_info_FID_fedtree_2eproto.base,
  &scc_info_GHPair_fedtree_2eproto.base,
  &scc_info_Ins2NodeID_fedtree_2eproto.base,
  &scc_info_Node_fedtree_2eproto.base,
  &scc_info_PID_fedtree_2eproto.base,
  &scc_info_Ready_fedtree_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fedtree_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fedtree_2eproto = {
  false, false, descriptor_table_protodef_fedtree_2eproto, "fedtree.proto", 1380,
  &descriptor_table_fedtree_2eproto_once, descriptor_table_fedtree_2eproto_sccs, descriptor_table_fedtree_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_fedtree_2eproto::offsets,
  file_level_metadata_fedtree_2eproto, 8, file_level_enum_descriptors_fedtree_2eproto, file_level_service_descriptors_fedtree_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fedtree_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fedtree_2eproto)), true);
namespace fedtree {

// ===================================================================

class PID::_Internal {
 public:
};

PID::PID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.PID)
}
PID::PID(const PID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:fedtree.PID)
}

void PID::SharedCtor() {
  id_ = 0;
}

PID::~PID() {
  // @@protoc_insertion_point(destructor:fedtree.PID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PID::ArenaDtor(void* object) {
  PID* _this = reinterpret_cast< PID* >(object);
  (void)_this;
}
void PID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PID& PID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PID_fedtree_2eproto.base);
  return *internal_default_instance();
}


void PID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.PID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.PID)
  return target;
}

size_t PID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.PID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.PID)
  GOOGLE_DCHECK_NE(&from, this);
  const PID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.PID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.PID)
    MergeFrom(*source);
  }
}

void PID::MergeFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.PID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void PID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PID::CopyFrom(const PID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.PID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PID::IsInitialized() const {
  return true;
}

void PID::InternalSwap(PID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ready::_Internal {
 public:
};

Ready::Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ready)
}
Ready::Ready(const Ready& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:fedtree.Ready)
}

void Ready::SharedCtor() {
  ready_ = false;
}

Ready::~Ready() {
  // @@protoc_insertion_point(destructor:fedtree.Ready)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ready::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ready::ArenaDtor(void* object) {
  Ready* _this = reinterpret_cast< Ready* >(object);
  (void)_this;
}
void Ready::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ready::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ready& Ready::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ready_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Ready::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ready)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ready::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ready::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ready)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ready)
  return target;
}

size_t Ready::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ready)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ready::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  const Ready* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ready>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Ready)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Ready)
    MergeFrom(*source);
  }
}

void Ready::MergeFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ready)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
}

void Ready::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ready::CopyFrom(const Ready& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ready)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ready::IsInitialized() const {
  return true;
}

void Ready::InternalSwap(Ready* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ready_, other->ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ready::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DatasetInfo::_Internal {
 public:
};

DatasetInfo::DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.DatasetInfo)
}
DatasetInfo::DatasetInfo(const DatasetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&n_bins_, &from.n_bins_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_columns_) -
    reinterpret_cast<char*>(&n_bins_)) + sizeof(n_columns_));
  // @@protoc_insertion_point(copy_constructor:fedtree.DatasetInfo)
}

void DatasetInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&n_bins_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_columns_) -
      reinterpret_cast<char*>(&n_bins_)) + sizeof(n_columns_));
}

DatasetInfo::~DatasetInfo() {
  // @@protoc_insertion_point(destructor:fedtree.DatasetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DatasetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DatasetInfo::ArenaDtor(void* object) {
  DatasetInfo* _this = reinterpret_cast< DatasetInfo* >(object);
  (void)_this;
}
void DatasetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatasetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatasetInfo& DatasetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatasetInfo_fedtree_2eproto.base);
  return *internal_default_instance();
}


void DatasetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.DatasetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&n_bins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_columns_) -
      reinterpret_cast<char*>(&n_bins_)) + sizeof(n_columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n_bins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatasetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.DatasetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n_bins = 1;
  if (this->n_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n_bins(), target);
  }

  // int32 n_columns = 2;
  if (this->n_columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_n_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.DatasetInfo)
  return target;
}

size_t DatasetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.DatasetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n_bins = 1;
  if (this->n_bins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_bins());
  }

  // int32 n_columns = 2;
  if (this->n_columns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_columns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatasetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatasetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.DatasetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.DatasetInfo)
    MergeFrom(*source);
  }
}

void DatasetInfo::MergeFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.DatasetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n_bins() != 0) {
    _internal_set_n_bins(from._internal_n_bins());
  }
  if (from.n_columns() != 0) {
    _internal_set_n_columns(from._internal_n_columns());
  }
}

void DatasetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetInfo::CopyFrom(const DatasetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.DatasetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInfo::IsInitialized() const {
  return true;
}

void DatasetInfo::InternalSwap(DatasetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DatasetInfo, n_columns_)
      + sizeof(DatasetInfo::n_columns_)
      - PROTOBUF_FIELD_OFFSET(DatasetInfo, n_bins_)>(
          reinterpret_cast<char*>(&n_bins_),
          reinterpret_cast<char*>(&other->n_bins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GHPair::_Internal {
 public:
};

GHPair::GHPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.GHPair)
}
GHPair::GHPair(const GHPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&g_, &from.g_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&g_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:fedtree.GHPair)
}

void GHPair::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&g_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&g_)) + sizeof(h_));
}

GHPair::~GHPair() {
  // @@protoc_insertion_point(destructor:fedtree.GHPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GHPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GHPair::ArenaDtor(void* object) {
  GHPair* _this = reinterpret_cast< GHPair* >(object);
  (void)_this;
}
void GHPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GHPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GHPair& GHPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GHPair_fedtree_2eproto.base);
  return *internal_default_instance();
}


void GHPair::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.GHPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&g_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&g_)) + sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GHPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double g = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GHPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.GHPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double g = 1;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_g(), target);
  }

  // double h = 2;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.GHPair)
  return target;
}

size_t GHPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.GHPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double g = 1;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 8;
  }

  // double h = 2;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GHPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.GHPair)
  GOOGLE_DCHECK_NE(&from, this);
  const GHPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GHPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.GHPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.GHPair)
    MergeFrom(*source);
  }
}

void GHPair::MergeFrom(const GHPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.GHPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    _internal_set_h(from._internal_h());
  }
}

void GHPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.GHPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GHPair::CopyFrom(const GHPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.GHPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GHPair::IsInitialized() const {
  return true;
}

void GHPair::InternalSwap(GHPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GHPair, h_)
      + sizeof(GHPair::h_)
      - PROTOBUF_FIELD_OFFSET(GHPair, g_)>(
          reinterpret_cast<char*>(&g_),
          reinterpret_cast<char*>(&other->g_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GHPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FID::_Internal {
 public:
};

FID::FID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.FID)
}
FID::FID(const FID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:fedtree.FID)
}

void FID::SharedCtor() {
  id_ = 0;
}

FID::~FID() {
  // @@protoc_insertion_point(destructor:fedtree.FID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FID::ArenaDtor(void* object) {
  FID* _this = reinterpret_cast< FID* >(object);
  (void)_this;
}
void FID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FID& FID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FID_fedtree_2eproto.base);
  return *internal_default_instance();
}


void FID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.FID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.FID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.FID)
  return target;
}

size_t FID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.FID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.FID)
  GOOGLE_DCHECK_NE(&from, this);
  const FID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.FID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.FID)
    MergeFrom(*source);
  }
}

void FID::MergeFrom(const FID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.FID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void FID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.FID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FID::CopyFrom(const FID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.FID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FID::IsInitialized() const {
  return true;
}

void FID::InternalSwap(FID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BestInfo::_Internal {
 public:
};

BestInfo::BestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.BestInfo)
}
BestInfo::BestInfo(const BestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:fedtree.BestInfo)
}

void BestInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(gain_));
}

BestInfo::~BestInfo() {
  // @@protoc_insertion_point(destructor:fedtree.BestInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BestInfo::ArenaDtor(void* object) {
  BestInfo* _this = reinterpret_cast< BestInfo* >(object);
  (void)_this;
}
void BestInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BestInfo& BestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BestInfo_fedtree_2eproto.base);
  return *internal_default_instance();
}


void BestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.BestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(gain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 global_fid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          global_fid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BestInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.BestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nid(), target);
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_idx(), target);
  }

  // int32 global_fid = 4;
  if (this->global_fid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_global_fid(), target);
  }

  // double gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.BestInfo)
  return target;
}

size_t BestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.BestInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nid());
  }

  // int32 idx = 3;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  // int32 global_fid = 4;
  if (this->global_fid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_global_fid());
  }

  // double gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.BestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.BestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.BestInfo)
    MergeFrom(*source);
  }
}

void BestInfo::MergeFrom(const BestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.BestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.global_fid() != 0) {
    _internal_set_global_fid(from._internal_global_fid());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
}

void BestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.BestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestInfo::CopyFrom(const BestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.BestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestInfo::IsInitialized() const {
  return true;
}

void BestInfo::InternalSwap(BestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BestInfo, gain_)
      + sizeof(BestInfo::gain_)
      - PROTOBUF_FIELD_OFFSET(BestInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&final_id_, &from.final_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_instances_) -
    reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
  // @@protoc_insertion_point(copy_constructor:fedtree.Node)
}

void Node::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&final_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&n_instances_) -
      reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:fedtree.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&final_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_instances_) -
      reinterpret_cast<char*>(&final_id_)) + sizeof(n_instances_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 final_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          final_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lch_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rch_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rch_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parent_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float base_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          base_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_feature_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          split_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float split_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          split_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 split_bid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          split_bid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool default_right = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          default_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_leaf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_leaf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pruned = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_pruned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sum_gh_pair_g = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          sum_gh_pair_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sum_gh_pair_h = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          sum_gh_pair_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 n_instances = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          n_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->final_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_final_id(), target);
  }

  // int32 lch_index = 2;
  if (this->lch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lch_index(), target);
  }

  // int32 rch_index = 3;
  if (this->rch_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rch_index(), target);
  }

  // int32 parent_index = 4;
  if (this->parent_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_parent_index(), target);
  }

  // float gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_gain(), target);
  }

  // float base_weight = 6;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_base_weight(), target);
  }

  // int32 split_feature_id = 7;
  if (this->split_feature_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_split_feature_id(), target);
  }

  // int32 pid = 8;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  // float split_value = 9;
  if (!(this->split_value() <= 0 && this->split_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_split_value(), target);
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_split_bid(), target);
  }

  // bool default_right = 11;
  if (this->default_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_default_right(), target);
  }

  // bool is_leaf = 12;
  if (this->is_leaf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_leaf(), target);
  }

  // bool is_valid = 13;
  if (this->is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_valid(), target);
  }

  // bool is_pruned = 14;
  if (this->is_pruned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_pruned(), target);
  }

  // float sum_gh_pair_g = 15;
  if (!(this->sum_gh_pair_g() <= 0 && this->sum_gh_pair_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_sum_gh_pair_g(), target);
  }

  // float sum_gh_pair_h = 16;
  if (!(this->sum_gh_pair_h() <= 0 && this->sum_gh_pair_h() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_sum_gh_pair_h(), target);
  }

  // int32 n_instances = 17;
  if (this->n_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_n_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 final_id = 1;
  if (this->final_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_id());
  }

  // int32 lch_index = 2;
  if (this->lch_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lch_index());
  }

  // int32 rch_index = 3;
  if (this->rch_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rch_index());
  }

  // int32 parent_index = 4;
  if (this->parent_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_index());
  }

  // float gain = 5;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 4;
  }

  // float base_weight = 6;
  if (!(this->base_weight() <= 0 && this->base_weight() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_feature_id = 7;
  if (this->split_feature_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_feature_id());
  }

  // int32 pid = 8;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // float split_value = 9;
  if (!(this->split_value() <= 0 && this->split_value() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 split_bid = 10;
  if (this->split_bid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_split_bid());
  }

  // bool default_right = 11;
  if (this->default_right() != 0) {
    total_size += 1 + 1;
  }

  // bool is_leaf = 12;
  if (this->is_leaf() != 0) {
    total_size += 1 + 1;
  }

  // bool is_valid = 13;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pruned = 14;
  if (this->is_pruned() != 0) {
    total_size += 1 + 1;
  }

  // float sum_gh_pair_g = 15;
  if (!(this->sum_gh_pair_g() <= 0 && this->sum_gh_pair_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float sum_gh_pair_h = 16;
  if (!(this->sum_gh_pair_h() <= 0 && this->sum_gh_pair_h() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 n_instances = 17;
  if (this->n_instances() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n_instances());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.final_id() != 0) {
    _internal_set_final_id(from._internal_final_id());
  }
  if (from.lch_index() != 0) {
    _internal_set_lch_index(from._internal_lch_index());
  }
  if (from.rch_index() != 0) {
    _internal_set_rch_index(from._internal_rch_index());
  }
  if (from.parent_index() != 0) {
    _internal_set_parent_index(from._internal_parent_index());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from.base_weight() <= 0 && from.base_weight() >= 0)) {
    _internal_set_base_weight(from._internal_base_weight());
  }
  if (from.split_feature_id() != 0) {
    _internal_set_split_feature_id(from._internal_split_feature_id());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (!(from.split_value() <= 0 && from.split_value() >= 0)) {
    _internal_set_split_value(from._internal_split_value());
  }
  if (from.split_bid() != 0) {
    _internal_set_split_bid(from._internal_split_bid());
  }
  if (from.default_right() != 0) {
    _internal_set_default_right(from._internal_default_right());
  }
  if (from.is_leaf() != 0) {
    _internal_set_is_leaf(from._internal_is_leaf());
  }
  if (from.is_valid() != 0) {
    _internal_set_is_valid(from._internal_is_valid());
  }
  if (from.is_pruned() != 0) {
    _internal_set_is_pruned(from._internal_is_pruned());
  }
  if (!(from.sum_gh_pair_g() <= 0 && from.sum_gh_pair_g() >= 0)) {
    _internal_set_sum_gh_pair_g(from._internal_sum_gh_pair_g());
  }
  if (!(from.sum_gh_pair_h() <= 0 && from.sum_gh_pair_h() >= 0)) {
    _internal_set_sum_gh_pair_h(from._internal_sum_gh_pair_h());
  }
  if (from.n_instances() != 0) {
    _internal_set_n_instances(from._internal_n_instances());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, n_instances_)
      + sizeof(Node::n_instances_)
      - PROTOBUF_FIELD_OFFSET(Node, final_id_)>(
          reinterpret_cast<char*>(&final_id_),
          reinterpret_cast<char*>(&other->final_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Ins2NodeID::_Internal {
 public:
};

Ins2NodeID::Ins2NodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fedtree.Ins2NodeID)
}
Ins2NodeID::Ins2NodeID(const Ins2NodeID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nid_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(nid_));
  // @@protoc_insertion_point(copy_constructor:fedtree.Ins2NodeID)
}

void Ins2NodeID::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nid_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(nid_));
}

Ins2NodeID::~Ins2NodeID() {
  // @@protoc_insertion_point(destructor:fedtree.Ins2NodeID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ins2NodeID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ins2NodeID::ArenaDtor(void* object) {
  Ins2NodeID* _this = reinterpret_cast< Ins2NodeID* >(object);
  (void)_this;
}
void Ins2NodeID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ins2NodeID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ins2NodeID& Ins2NodeID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ins2NodeID_fedtree_2eproto.base);
  return *internal_default_instance();
}


void Ins2NodeID::Clear() {
// @@protoc_insertion_point(message_clear_start:fedtree.Ins2NodeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nid_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(nid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ins2NodeID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ins2NodeID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fedtree.Ins2NodeID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iid = 1;
  if (this->iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iid(), target);
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fedtree.Ins2NodeID)
  return target;
}

size_t Ins2NodeID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fedtree.Ins2NodeID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iid = 1;
  if (this->iid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iid());
  }

  // int32 nid = 2;
  if (this->nid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ins2NodeID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fedtree.Ins2NodeID)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins2NodeID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ins2NodeID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fedtree.Ins2NodeID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fedtree.Ins2NodeID)
    MergeFrom(*source);
  }
}

void Ins2NodeID::MergeFrom(const Ins2NodeID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fedtree.Ins2NodeID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from.nid() != 0) {
    _internal_set_nid(from._internal_nid());
  }
}

void Ins2NodeID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fedtree.Ins2NodeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins2NodeID::CopyFrom(const Ins2NodeID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fedtree.Ins2NodeID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins2NodeID::IsInitialized() const {
  return true;
}

void Ins2NodeID::InternalSwap(Ins2NodeID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ins2NodeID, nid_)
      + sizeof(Ins2NodeID::nid_)
      - PROTOBUF_FIELD_OFFSET(Ins2NodeID, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ins2NodeID::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fedtree
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fedtree::PID* Arena::CreateMaybeMessage< ::fedtree::PID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::PID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ready* Arena::CreateMaybeMessage< ::fedtree::Ready >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ready >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::DatasetInfo* Arena::CreateMaybeMessage< ::fedtree::DatasetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::DatasetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::GHPair* Arena::CreateMaybeMessage< ::fedtree::GHPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::GHPair >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::FID* Arena::CreateMaybeMessage< ::fedtree::FID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::FID >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::BestInfo* Arena::CreateMaybeMessage< ::fedtree::BestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::BestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Node* Arena::CreateMaybeMessage< ::fedtree::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::fedtree::Ins2NodeID* Arena::CreateMaybeMessage< ::fedtree::Ins2NodeID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fedtree::Ins2NodeID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
