// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedtree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fedtree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fedtree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fedtree_2eproto;
namespace fedtree {
class BestInfo;
class BestInfoDefaultTypeInternal;
extern BestInfoDefaultTypeInternal _BestInfo_default_instance_;
class DatasetInfo;
class DatasetInfoDefaultTypeInternal;
extern DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
class FID;
class FIDDefaultTypeInternal;
extern FIDDefaultTypeInternal _FID_default_instance_;
class GHPair;
class GHPairDefaultTypeInternal;
extern GHPairDefaultTypeInternal _GHPair_default_instance_;
class Ins2NodeID;
class Ins2NodeIDDefaultTypeInternal;
extern Ins2NodeIDDefaultTypeInternal _Ins2NodeID_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class PID;
class PIDDefaultTypeInternal;
extern PIDDefaultTypeInternal _PID_default_instance_;
class Ready;
class ReadyDefaultTypeInternal;
extern ReadyDefaultTypeInternal _Ready_default_instance_;
}  // namespace fedtree
PROTOBUF_NAMESPACE_OPEN
template<> ::fedtree::BestInfo* Arena::CreateMaybeMessage<::fedtree::BestInfo>(Arena*);
template<> ::fedtree::DatasetInfo* Arena::CreateMaybeMessage<::fedtree::DatasetInfo>(Arena*);
template<> ::fedtree::FID* Arena::CreateMaybeMessage<::fedtree::FID>(Arena*);
template<> ::fedtree::GHPair* Arena::CreateMaybeMessage<::fedtree::GHPair>(Arena*);
template<> ::fedtree::Ins2NodeID* Arena::CreateMaybeMessage<::fedtree::Ins2NodeID>(Arena*);
template<> ::fedtree::Node* Arena::CreateMaybeMessage<::fedtree::Node>(Arena*);
template<> ::fedtree::PID* Arena::CreateMaybeMessage<::fedtree::PID>(Arena*);
template<> ::fedtree::Ready* Arena::CreateMaybeMessage<::fedtree::Ready>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fedtree {

// ===================================================================

class PID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.PID) */ {
 public:
  inline PID() : PID(nullptr) {}
  virtual ~PID();

  PID(const PID& from);
  PID(PID&& from) noexcept
    : PID() {
    *this = ::std::move(from);
  }

  inline PID& operator=(const PID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PID& operator=(PID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PID& default_instance();

  static inline const PID* internal_default_instance() {
    return reinterpret_cast<const PID*>(
               &_PID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PID& a, PID& b) {
    a.Swap(&b);
  }
  inline void Swap(PID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PID* New() const final {
    return CreateMaybeMessage<PID>(nullptr);
  }

  PID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PID& from);
  void MergeFrom(const PID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.PID";
  }
  protected:
  explicit PID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.PID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ready PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ready) */ {
 public:
  inline Ready() : Ready(nullptr) {}
  virtual ~Ready();

  Ready(const Ready& from);
  Ready(Ready&& from) noexcept
    : Ready() {
    *this = ::std::move(from);
  }

  inline Ready& operator=(const Ready& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ready& operator=(Ready&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ready& default_instance();

  static inline const Ready* internal_default_instance() {
    return reinterpret_cast<const Ready*>(
               &_Ready_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ready& a, Ready& b) {
    a.Swap(&b);
  }
  inline void Swap(Ready* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ready* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ready* New() const final {
    return CreateMaybeMessage<Ready>(nullptr);
  }

  Ready* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ready>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ready& from);
  void MergeFrom(const Ready& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ready* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ready";
  }
  protected:
  explicit Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyFieldNumber = 1,
  };
  // bool ready = 1;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Ready)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class DatasetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.DatasetInfo) */ {
 public:
  inline DatasetInfo() : DatasetInfo(nullptr) {}
  virtual ~DatasetInfo();

  DatasetInfo(const DatasetInfo& from);
  DatasetInfo(DatasetInfo&& from) noexcept
    : DatasetInfo() {
    *this = ::std::move(from);
  }

  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInfo& operator=(DatasetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatasetInfo& default_instance();

  static inline const DatasetInfo* internal_default_instance() {
    return reinterpret_cast<const DatasetInfo*>(
               &_DatasetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DatasetInfo& a, DatasetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatasetInfo* New() const final {
    return CreateMaybeMessage<DatasetInfo>(nullptr);
  }

  DatasetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatasetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatasetInfo& from);
  void MergeFrom(const DatasetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.DatasetInfo";
  }
  protected:
  explicit DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNBinsFieldNumber = 1,
    kNColumnsFieldNumber = 2,
  };
  // int32 n_bins = 1;
  void clear_n_bins();
  ::PROTOBUF_NAMESPACE_ID::int32 n_bins() const;
  void set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_bins() const;
  void _internal_set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 n_columns = 2;
  void clear_n_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 n_columns() const;
  void set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_columns() const;
  void _internal_set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.DatasetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_bins_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHPair) */ {
 public:
  inline GHPair() : GHPair(nullptr) {}
  virtual ~GHPair();

  GHPair(const GHPair& from);
  GHPair(GHPair&& from) noexcept
    : GHPair() {
    *this = ::std::move(from);
  }

  inline GHPair& operator=(const GHPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHPair& operator=(GHPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GHPair& default_instance();

  static inline const GHPair* internal_default_instance() {
    return reinterpret_cast<const GHPair*>(
               &_GHPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GHPair& a, GHPair& b) {
    a.Swap(&b);
  }
  inline void Swap(GHPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GHPair* New() const final {
    return CreateMaybeMessage<GHPair>(nullptr);
  }

  GHPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GHPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GHPair& from);
  void MergeFrom(const GHPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHPair";
  }
  protected:
  explicit GHPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // double g = 1;
  void clear_g();
  double g() const;
  void set_g(double value);
  private:
  double _internal_g() const;
  void _internal_set_g(double value);
  public:

  // double h = 2;
  void clear_h();
  double h() const;
  void set_h(double value);
  private:
  double _internal_h() const;
  void _internal_set_h(double value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double g_;
  double h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class FID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.FID) */ {
 public:
  inline FID() : FID(nullptr) {}
  virtual ~FID();

  FID(const FID& from);
  FID(FID&& from) noexcept
    : FID() {
    *this = ::std::move(from);
  }

  inline FID& operator=(const FID& from) {
    CopyFrom(from);
    return *this;
  }
  inline FID& operator=(FID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FID& default_instance();

  static inline const FID* internal_default_instance() {
    return reinterpret_cast<const FID*>(
               &_FID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FID& a, FID& b) {
    a.Swap(&b);
  }
  inline void Swap(FID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FID* New() const final {
    return CreateMaybeMessage<FID>(nullptr);
  }

  FID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FID& from);
  void MergeFrom(const FID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.FID";
  }
  protected:
  explicit FID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.FID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class BestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.BestInfo) */ {
 public:
  inline BestInfo() : BestInfo(nullptr) {}
  virtual ~BestInfo();

  BestInfo(const BestInfo& from);
  BestInfo(BestInfo&& from) noexcept
    : BestInfo() {
    *this = ::std::move(from);
  }

  inline BestInfo& operator=(const BestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BestInfo& operator=(BestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BestInfo& default_instance();

  static inline const BestInfo* internal_default_instance() {
    return reinterpret_cast<const BestInfo*>(
               &_BestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BestInfo& a, BestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BestInfo* New() const final {
    return CreateMaybeMessage<BestInfo>(nullptr);
  }

  BestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BestInfo& from);
  void MergeFrom(const BestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.BestInfo";
  }
  protected:
  explicit BestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kNidFieldNumber = 2,
    kIdxFieldNumber = 3,
    kGlobalFidFieldNumber = 4,
    kGainFieldNumber = 5,
  };
  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nid = 2;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nid() const;
  void _internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idx = 3;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 global_fid = 4;
  void clear_global_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 global_fid() const;
  void set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_global_fid() const;
  void _internal_set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double gain = 5;
  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.BestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_fid_;
  double gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalIdFieldNumber = 1,
    kLchIndexFieldNumber = 2,
    kRchIndexFieldNumber = 3,
    kParentIndexFieldNumber = 4,
    kGainFieldNumber = 5,
    kBaseWeightFieldNumber = 6,
    kSplitFeatureIdFieldNumber = 7,
    kPidFieldNumber = 8,
    kSplitValueFieldNumber = 9,
    kSplitBidFieldNumber = 10,
    kDefaultRightFieldNumber = 11,
    kIsLeafFieldNumber = 12,
    kIsValidFieldNumber = 13,
    kIsPrunedFieldNumber = 14,
    kSumGhPairGFieldNumber = 15,
    kSumGhPairHFieldNumber = 16,
    kNInstancesFieldNumber = 17,
  };
  // int32 final_id = 1;
  void clear_final_id();
  ::PROTOBUF_NAMESPACE_ID::int32 final_id() const;
  void set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_id() const;
  void _internal_set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lch_index = 2;
  void clear_lch_index();
  ::PROTOBUF_NAMESPACE_ID::int32 lch_index() const;
  void set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lch_index() const;
  void _internal_set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rch_index = 3;
  void clear_rch_index();
  ::PROTOBUF_NAMESPACE_ID::int32 rch_index() const;
  void set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rch_index() const;
  void _internal_set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parent_index = 4;
  void clear_parent_index();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_index() const;
  void set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_index() const;
  void _internal_set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float gain = 5;
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // float base_weight = 6;
  void clear_base_weight();
  float base_weight() const;
  void set_base_weight(float value);
  private:
  float _internal_base_weight() const;
  void _internal_set_base_weight(float value);
  public:

  // int32 split_feature_id = 7;
  void clear_split_feature_id();
  ::PROTOBUF_NAMESPACE_ID::int32 split_feature_id() const;
  void set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_feature_id() const;
  void _internal_set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 8;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float split_value = 9;
  void clear_split_value();
  float split_value() const;
  void set_split_value(float value);
  private:
  float _internal_split_value() const;
  void _internal_set_split_value(float value);
  public:

  // int32 split_bid = 10;
  void clear_split_bid();
  ::PROTOBUF_NAMESPACE_ID::int32 split_bid() const;
  void set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_bid() const;
  void _internal_set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool default_right = 11;
  void clear_default_right();
  bool default_right() const;
  void set_default_right(bool value);
  private:
  bool _internal_default_right() const;
  void _internal_set_default_right(bool value);
  public:

  // bool is_leaf = 12;
  void clear_is_leaf();
  bool is_leaf() const;
  void set_is_leaf(bool value);
  private:
  bool _internal_is_leaf() const;
  void _internal_set_is_leaf(bool value);
  public:

  // bool is_valid = 13;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // bool is_pruned = 14;
  void clear_is_pruned();
  bool is_pruned() const;
  void set_is_pruned(bool value);
  private:
  bool _internal_is_pruned() const;
  void _internal_set_is_pruned(bool value);
  public:

  // float sum_gh_pair_g = 15;
  void clear_sum_gh_pair_g();
  float sum_gh_pair_g() const;
  void set_sum_gh_pair_g(float value);
  private:
  float _internal_sum_gh_pair_g() const;
  void _internal_set_sum_gh_pair_g(float value);
  public:

  // float sum_gh_pair_h = 16;
  void clear_sum_gh_pair_h();
  float sum_gh_pair_h() const;
  void set_sum_gh_pair_h(float value);
  private:
  float _internal_sum_gh_pair_h() const;
  void _internal_set_sum_gh_pair_h(float value);
  public:

  // int32 n_instances = 17;
  void clear_n_instances();
  ::PROTOBUF_NAMESPACE_ID::int32 n_instances() const;
  void set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_instances() const;
  void _internal_set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lch_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 rch_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_index_;
  float gain_;
  float base_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_feature_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  float split_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_bid_;
  bool default_right_;
  bool is_leaf_;
  bool is_valid_;
  bool is_pruned_;
  float sum_gh_pair_g_;
  float sum_gh_pair_h_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_instances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ins2NodeID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ins2NodeID) */ {
 public:
  inline Ins2NodeID() : Ins2NodeID(nullptr) {}
  virtual ~Ins2NodeID();

  Ins2NodeID(const Ins2NodeID& from);
  Ins2NodeID(Ins2NodeID&& from) noexcept
    : Ins2NodeID() {
    *this = ::std::move(from);
  }

  inline Ins2NodeID& operator=(const Ins2NodeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ins2NodeID& operator=(Ins2NodeID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ins2NodeID& default_instance();

  static inline const Ins2NodeID* internal_default_instance() {
    return reinterpret_cast<const Ins2NodeID*>(
               &_Ins2NodeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Ins2NodeID& a, Ins2NodeID& b) {
    a.Swap(&b);
  }
  inline void Swap(Ins2NodeID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ins2NodeID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ins2NodeID* New() const final {
    return CreateMaybeMessage<Ins2NodeID>(nullptr);
  }

  Ins2NodeID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ins2NodeID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ins2NodeID& from);
  void MergeFrom(const Ins2NodeID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins2NodeID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ins2NodeID";
  }
  protected:
  explicit Ins2NodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kNidFieldNumber = 2,
  };
  // int32 iid = 1;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::int32 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iid() const;
  void _internal_set_iid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nid = 2;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nid() const;
  void _internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Ins2NodeID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PID

// int32 id = 1;
inline void PID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PID::id() const {
  // @@protoc_insertion_point(field_get:fedtree.PID.id)
  return _internal_id();
}
inline void PID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fedtree.PID.id)
}

// -------------------------------------------------------------------

// Ready

// bool ready = 1;
inline void Ready::clear_ready() {
  ready_ = false;
}
inline bool Ready::_internal_ready() const {
  return ready_;
}
inline bool Ready::ready() const {
  // @@protoc_insertion_point(field_get:fedtree.Ready.ready)
  return _internal_ready();
}
inline void Ready::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void Ready::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:fedtree.Ready.ready)
}

// -------------------------------------------------------------------

// DatasetInfo

// int32 n_bins = 1;
inline void DatasetInfo::clear_n_bins() {
  n_bins_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::_internal_n_bins() const {
  return n_bins_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::n_bins() const {
  // @@protoc_insertion_point(field_get:fedtree.DatasetInfo.n_bins)
  return _internal_n_bins();
}
inline void DatasetInfo::_internal_set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_bins_ = value;
}
inline void DatasetInfo::set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_bins(value);
  // @@protoc_insertion_point(field_set:fedtree.DatasetInfo.n_bins)
}

// int32 n_columns = 2;
inline void DatasetInfo::clear_n_columns() {
  n_columns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::_internal_n_columns() const {
  return n_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::n_columns() const {
  // @@protoc_insertion_point(field_get:fedtree.DatasetInfo.n_columns)
  return _internal_n_columns();
}
inline void DatasetInfo::_internal_set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_columns_ = value;
}
inline void DatasetInfo::set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_columns(value);
  // @@protoc_insertion_point(field_set:fedtree.DatasetInfo.n_columns)
}

// -------------------------------------------------------------------

// GHPair

// double g = 1;
inline void GHPair::clear_g() {
  g_ = 0;
}
inline double GHPair::_internal_g() const {
  return g_;
}
inline double GHPair::g() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPair.g)
  return _internal_g();
}
inline void GHPair::_internal_set_g(double value) {
  
  g_ = value;
}
inline void GHPair::set_g(double value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPair.g)
}

// double h = 2;
inline void GHPair::clear_h() {
  h_ = 0;
}
inline double GHPair::_internal_h() const {
  return h_;
}
inline double GHPair::h() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPair.h)
  return _internal_h();
}
inline void GHPair::_internal_set_h(double value) {
  
  h_ = value;
}
inline void GHPair::set_h(double value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPair.h)
}

// -------------------------------------------------------------------

// FID

// int32 id = 1;
inline void FID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FID::id() const {
  // @@protoc_insertion_point(field_get:fedtree.FID.id)
  return _internal_id();
}
inline void FID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void FID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fedtree.FID.id)
}

// -------------------------------------------------------------------

// BestInfo

// int32 pid = 1;
inline void BestInfo::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.pid)
  return _internal_pid();
}
inline void BestInfo::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void BestInfo::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.pid)
}

// int32 nid = 2;
inline void BestInfo::clear_nid() {
  nid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_nid() const {
  return nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.nid)
  return _internal_nid();
}
inline void BestInfo::_internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nid_ = value;
}
inline void BestInfo::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.nid)
}

// int32 idx = 3;
inline void BestInfo::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::idx() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.idx)
  return _internal_idx();
}
inline void BestInfo::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void BestInfo::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.idx)
}

// int32 global_fid = 4;
inline void BestInfo::clear_global_fid() {
  global_fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_global_fid() const {
  return global_fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::global_fid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.global_fid)
  return _internal_global_fid();
}
inline void BestInfo::_internal_set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  global_fid_ = value;
}
inline void BestInfo::set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_global_fid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.global_fid)
}

// double gain = 5;
inline void BestInfo::clear_gain() {
  gain_ = 0;
}
inline double BestInfo::_internal_gain() const {
  return gain_;
}
inline double BestInfo::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.gain)
  return _internal_gain();
}
inline void BestInfo::_internal_set_gain(double value) {
  
  gain_ = value;
}
inline void BestInfo::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.gain)
}

// -------------------------------------------------------------------

// Node

// int32 final_id = 1;
inline void Node::clear_final_id() {
  final_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_final_id() const {
  return final_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::final_id() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.final_id)
  return _internal_final_id();
}
inline void Node::_internal_set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  final_id_ = value;
}
inline void Node::set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_id(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.final_id)
}

// int32 lch_index = 2;
inline void Node::clear_lch_index() {
  lch_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_lch_index() const {
  return lch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::lch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.lch_index)
  return _internal_lch_index();
}
inline void Node::_internal_set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lch_index_ = value;
}
inline void Node::set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.lch_index)
}

// int32 rch_index = 3;
inline void Node::clear_rch_index() {
  rch_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_rch_index() const {
  return rch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::rch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.rch_index)
  return _internal_rch_index();
}
inline void Node::_internal_set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rch_index_ = value;
}
inline void Node::set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.rch_index)
}

// int32 parent_index = 4;
inline void Node::clear_parent_index() {
  parent_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_parent_index() const {
  return parent_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::parent_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.parent_index)
  return _internal_parent_index();
}
inline void Node::_internal_set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_index_ = value;
}
inline void Node::set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.parent_index)
}

// float gain = 5;
inline void Node::clear_gain() {
  gain_ = 0;
}
inline float Node::_internal_gain() const {
  return gain_;
}
inline float Node::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.gain)
  return _internal_gain();
}
inline void Node::_internal_set_gain(float value) {
  
  gain_ = value;
}
inline void Node::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.gain)
}

// float base_weight = 6;
inline void Node::clear_base_weight() {
  base_weight_ = 0;
}
inline float Node::_internal_base_weight() const {
  return base_weight_;
}
inline float Node::base_weight() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.base_weight)
  return _internal_base_weight();
}
inline void Node::_internal_set_base_weight(float value) {
  
  base_weight_ = value;
}
inline void Node::set_base_weight(float value) {
  _internal_set_base_weight(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.base_weight)
}

// int32 split_feature_id = 7;
inline void Node::clear_split_feature_id() {
  split_feature_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_split_feature_id() const {
  return split_feature_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::split_feature_id() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_feature_id)
  return _internal_split_feature_id();
}
inline void Node::_internal_set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_feature_id_ = value;
}
inline void Node::set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_feature_id(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_feature_id)
}

// int32 pid = 8;
inline void Node::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.pid)
  return _internal_pid();
}
inline void Node::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Node::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.pid)
}

// float split_value = 9;
inline void Node::clear_split_value() {
  split_value_ = 0;
}
inline float Node::_internal_split_value() const {
  return split_value_;
}
inline float Node::split_value() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_value)
  return _internal_split_value();
}
inline void Node::_internal_set_split_value(float value) {
  
  split_value_ = value;
}
inline void Node::set_split_value(float value) {
  _internal_set_split_value(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_value)
}

// int32 split_bid = 10;
inline void Node::clear_split_bid() {
  split_bid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_split_bid() const {
  return split_bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::split_bid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_bid)
  return _internal_split_bid();
}
inline void Node::_internal_set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_bid_ = value;
}
inline void Node::set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_bid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_bid)
}

// bool default_right = 11;
inline void Node::clear_default_right() {
  default_right_ = false;
}
inline bool Node::_internal_default_right() const {
  return default_right_;
}
inline bool Node::default_right() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.default_right)
  return _internal_default_right();
}
inline void Node::_internal_set_default_right(bool value) {
  
  default_right_ = value;
}
inline void Node::set_default_right(bool value) {
  _internal_set_default_right(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.default_right)
}

// bool is_leaf = 12;
inline void Node::clear_is_leaf() {
  is_leaf_ = false;
}
inline bool Node::_internal_is_leaf() const {
  return is_leaf_;
}
inline bool Node::is_leaf() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_leaf)
  return _internal_is_leaf();
}
inline void Node::_internal_set_is_leaf(bool value) {
  
  is_leaf_ = value;
}
inline void Node::set_is_leaf(bool value) {
  _internal_set_is_leaf(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_leaf)
}

// bool is_valid = 13;
inline void Node::clear_is_valid() {
  is_valid_ = false;
}
inline bool Node::_internal_is_valid() const {
  return is_valid_;
}
inline bool Node::is_valid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_valid)
  return _internal_is_valid();
}
inline void Node::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void Node::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_valid)
}

// bool is_pruned = 14;
inline void Node::clear_is_pruned() {
  is_pruned_ = false;
}
inline bool Node::_internal_is_pruned() const {
  return is_pruned_;
}
inline bool Node::is_pruned() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_pruned)
  return _internal_is_pruned();
}
inline void Node::_internal_set_is_pruned(bool value) {
  
  is_pruned_ = value;
}
inline void Node::set_is_pruned(bool value) {
  _internal_set_is_pruned(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_pruned)
}

// float sum_gh_pair_g = 15;
inline void Node::clear_sum_gh_pair_g() {
  sum_gh_pair_g_ = 0;
}
inline float Node::_internal_sum_gh_pair_g() const {
  return sum_gh_pair_g_;
}
inline float Node::sum_gh_pair_g() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.sum_gh_pair_g)
  return _internal_sum_gh_pair_g();
}
inline void Node::_internal_set_sum_gh_pair_g(float value) {
  
  sum_gh_pair_g_ = value;
}
inline void Node::set_sum_gh_pair_g(float value) {
  _internal_set_sum_gh_pair_g(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.sum_gh_pair_g)
}

// float sum_gh_pair_h = 16;
inline void Node::clear_sum_gh_pair_h() {
  sum_gh_pair_h_ = 0;
}
inline float Node::_internal_sum_gh_pair_h() const {
  return sum_gh_pair_h_;
}
inline float Node::sum_gh_pair_h() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.sum_gh_pair_h)
  return _internal_sum_gh_pair_h();
}
inline void Node::_internal_set_sum_gh_pair_h(float value) {
  
  sum_gh_pair_h_ = value;
}
inline void Node::set_sum_gh_pair_h(float value) {
  _internal_set_sum_gh_pair_h(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.sum_gh_pair_h)
}

// int32 n_instances = 17;
inline void Node::clear_n_instances() {
  n_instances_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_n_instances() const {
  return n_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::n_instances() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.n_instances)
  return _internal_n_instances();
}
inline void Node::_internal_set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_instances_ = value;
}
inline void Node::set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_instances(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.n_instances)
}

// -------------------------------------------------------------------

// Ins2NodeID

// int32 iid = 1;
inline void Ins2NodeID::clear_iid() {
  iid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::_internal_iid() const {
  return iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::iid() const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeID.iid)
  return _internal_iid();
}
inline void Ins2NodeID::_internal_set_iid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iid_ = value;
}
inline void Ins2NodeID::set_iid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeID.iid)
}

// int32 nid = 2;
inline void Ins2NodeID::clear_nid() {
  nid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::_internal_nid() const {
  return nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeID.nid)
  return _internal_nid();
}
inline void Ins2NodeID::_internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nid_ = value;
}
inline void Ins2NodeID::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeID.nid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fedtree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto
