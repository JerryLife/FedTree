// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fedtree.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fedtree_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fedtree_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fedtree_2eproto;
namespace fedtree {
class BestInfo;
class BestInfoDefaultTypeInternal;
extern BestInfoDefaultTypeInternal _BestInfo_default_instance_;
class DatasetInfo;
class DatasetInfoDefaultTypeInternal;
extern DatasetInfoDefaultTypeInternal _DatasetInfo_default_instance_;
class FID;
class FIDDefaultTypeInternal;
extern FIDDefaultTypeInternal _FID_default_instance_;
class FIDBatch;
class FIDBatchDefaultTypeInternal;
extern FIDBatchDefaultTypeInternal _FIDBatch_default_instance_;
class GHArray;
class GHArrayDefaultTypeInternal;
extern GHArrayDefaultTypeInternal _GHArray_default_instance_;
class GHBatch;
class GHBatchDefaultTypeInternal;
extern GHBatchDefaultTypeInternal _GHBatch_default_instance_;
class GHEncBatch;
class GHEncBatchDefaultTypeInternal;
extern GHEncBatchDefaultTypeInternal _GHEncBatch_default_instance_;
class GHPair;
class GHPairDefaultTypeInternal;
extern GHPairDefaultTypeInternal _GHPair_default_instance_;
class GHPairEnc;
class GHPairEncDefaultTypeInternal;
extern GHPairEncDefaultTypeInternal _GHPairEnc_default_instance_;
class Ins2NodeID;
class Ins2NodeIDDefaultTypeInternal;
extern Ins2NodeIDDefaultTypeInternal _Ins2NodeID_default_instance_;
class Ins2NodeIDBatch;
class Ins2NodeIDBatchDefaultTypeInternal;
extern Ins2NodeIDBatchDefaultTypeInternal _Ins2NodeIDBatch_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class PID;
class PIDDefaultTypeInternal;
extern PIDDefaultTypeInternal _PID_default_instance_;
class Paillier;
class PaillierDefaultTypeInternal;
extern PaillierDefaultTypeInternal _Paillier_default_instance_;
class Ready;
class ReadyDefaultTypeInternal;
extern ReadyDefaultTypeInternal _Ready_default_instance_;
class Score;
class ScoreDefaultTypeInternal;
extern ScoreDefaultTypeInternal _Score_default_instance_;
class SplitPoint;
class SplitPointDefaultTypeInternal;
extern SplitPointDefaultTypeInternal _SplitPoint_default_instance_;
}  // namespace fedtree
PROTOBUF_NAMESPACE_OPEN
template<> ::fedtree::BestInfo* Arena::CreateMaybeMessage<::fedtree::BestInfo>(Arena*);
template<> ::fedtree::DatasetInfo* Arena::CreateMaybeMessage<::fedtree::DatasetInfo>(Arena*);
template<> ::fedtree::FID* Arena::CreateMaybeMessage<::fedtree::FID>(Arena*);
template<> ::fedtree::FIDBatch* Arena::CreateMaybeMessage<::fedtree::FIDBatch>(Arena*);
template<> ::fedtree::GHArray* Arena::CreateMaybeMessage<::fedtree::GHArray>(Arena*);
template<> ::fedtree::GHBatch* Arena::CreateMaybeMessage<::fedtree::GHBatch>(Arena*);
template<> ::fedtree::GHEncBatch* Arena::CreateMaybeMessage<::fedtree::GHEncBatch>(Arena*);
template<> ::fedtree::GHPair* Arena::CreateMaybeMessage<::fedtree::GHPair>(Arena*);
template<> ::fedtree::GHPairEnc* Arena::CreateMaybeMessage<::fedtree::GHPairEnc>(Arena*);
template<> ::fedtree::Ins2NodeID* Arena::CreateMaybeMessage<::fedtree::Ins2NodeID>(Arena*);
template<> ::fedtree::Ins2NodeIDBatch* Arena::CreateMaybeMessage<::fedtree::Ins2NodeIDBatch>(Arena*);
template<> ::fedtree::Node* Arena::CreateMaybeMessage<::fedtree::Node>(Arena*);
template<> ::fedtree::PID* Arena::CreateMaybeMessage<::fedtree::PID>(Arena*);
template<> ::fedtree::Paillier* Arena::CreateMaybeMessage<::fedtree::Paillier>(Arena*);
template<> ::fedtree::Ready* Arena::CreateMaybeMessage<::fedtree::Ready>(Arena*);
template<> ::fedtree::Score* Arena::CreateMaybeMessage<::fedtree::Score>(Arena*);
template<> ::fedtree::SplitPoint* Arena::CreateMaybeMessage<::fedtree::SplitPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fedtree {

// ===================================================================

class FIDBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.FIDBatch) */ {
 public:
  inline FIDBatch() : FIDBatch(nullptr) {}
  virtual ~FIDBatch();

  FIDBatch(const FIDBatch& from);
  FIDBatch(FIDBatch&& from) noexcept
    : FIDBatch() {
    *this = ::std::move(from);
  }

  inline FIDBatch& operator=(const FIDBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FIDBatch& operator=(FIDBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FIDBatch& default_instance();

  static inline const FIDBatch* internal_default_instance() {
    return reinterpret_cast<const FIDBatch*>(
               &_FIDBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FIDBatch& a, FIDBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(FIDBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FIDBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FIDBatch* New() const final {
    return CreateMaybeMessage<FIDBatch>(nullptr);
  }

  FIDBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FIDBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FIDBatch& from);
  void MergeFrom(const FIDBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FIDBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.FIDBatch";
  }
  protected:
  explicit FIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated int32 id = 1 [packed = true];
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_id() const;
  void _internal_add_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 id(int index) const;
  void set_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:fedtree.FIDBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHBatch) */ {
 public:
  inline GHBatch() : GHBatch(nullptr) {}
  virtual ~GHBatch();

  GHBatch(const GHBatch& from);
  GHBatch(GHBatch&& from) noexcept
    : GHBatch() {
    *this = ::std::move(from);
  }

  inline GHBatch& operator=(const GHBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHBatch& operator=(GHBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GHBatch& default_instance();

  static inline const GHBatch* internal_default_instance() {
    return reinterpret_cast<const GHBatch*>(
               &_GHBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GHBatch& a, GHBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(GHBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GHBatch* New() const final {
    return CreateMaybeMessage<GHBatch>(nullptr);
  }

  GHBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GHBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GHBatch& from);
  void MergeFrom(const GHBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHBatch";
  }
  protected:
  explicit GHBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // repeated double g = 1 [packed = true];
  int g_size() const;
  private:
  int _internal_g_size() const;
  public:
  void clear_g();
  private:
  double _internal_g(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_g() const;
  void _internal_add_g(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_g();
  public:
  double g(int index) const;
  void set_g(int index, double value);
  void add_g(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      g() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_g();

  // repeated double h = 2 [packed = true];
  int h_size() const;
  private:
  int _internal_h_size() const;
  public:
  void clear_h();
  private:
  double _internal_h(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_h() const;
  void _internal_add_h(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_h();
  public:
  double h(int index) const;
  void set_h(int index, double value);
  void add_h(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      h() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_h();

  // @@protoc_insertion_point(class_scope:fedtree.GHBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > g_;
  mutable std::atomic<int> _g_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > h_;
  mutable std::atomic<int> _h_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHEncBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHEncBatch) */ {
 public:
  inline GHEncBatch() : GHEncBatch(nullptr) {}
  virtual ~GHEncBatch();

  GHEncBatch(const GHEncBatch& from);
  GHEncBatch(GHEncBatch&& from) noexcept
    : GHEncBatch() {
    *this = ::std::move(from);
  }

  inline GHEncBatch& operator=(const GHEncBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHEncBatch& operator=(GHEncBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GHEncBatch& default_instance();

  static inline const GHEncBatch* internal_default_instance() {
    return reinterpret_cast<const GHEncBatch*>(
               &_GHEncBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GHEncBatch& a, GHEncBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(GHEncBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHEncBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GHEncBatch* New() const final {
    return CreateMaybeMessage<GHEncBatch>(nullptr);
  }

  GHEncBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GHEncBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GHEncBatch& from);
  void MergeFrom(const GHEncBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHEncBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHEncBatch";
  }
  protected:
  explicit GHEncBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGEncFieldNumber = 1,
    kHEncFieldNumber = 2,
  };
  // repeated string g_enc = 1;
  int g_enc_size() const;
  private:
  int _internal_g_enc_size() const;
  public:
  void clear_g_enc();
  const std::string& g_enc(int index) const;
  std::string* mutable_g_enc(int index);
  void set_g_enc(int index, const std::string& value);
  void set_g_enc(int index, std::string&& value);
  void set_g_enc(int index, const char* value);
  void set_g_enc(int index, const char* value, size_t size);
  std::string* add_g_enc();
  void add_g_enc(const std::string& value);
  void add_g_enc(std::string&& value);
  void add_g_enc(const char* value);
  void add_g_enc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& g_enc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_g_enc();
  private:
  const std::string& _internal_g_enc(int index) const;
  std::string* _internal_add_g_enc();
  public:

  // repeated string h_enc = 2;
  int h_enc_size() const;
  private:
  int _internal_h_enc_size() const;
  public:
  void clear_h_enc();
  const std::string& h_enc(int index) const;
  std::string* mutable_h_enc(int index);
  void set_h_enc(int index, const std::string& value);
  void set_h_enc(int index, std::string&& value);
  void set_h_enc(int index, const char* value);
  void set_h_enc(int index, const char* value, size_t size);
  std::string* add_h_enc();
  void add_h_enc(const std::string& value);
  void add_h_enc(std::string&& value);
  void add_h_enc(const char* value);
  void add_h_enc(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& h_enc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_h_enc();
  private:
  const std::string& _internal_h_enc(int index) const;
  std::string* _internal_add_h_enc();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHEncBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> g_enc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> h_enc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHPair) */ {
 public:
  inline GHPair() : GHPair(nullptr) {}
  virtual ~GHPair();

  GHPair(const GHPair& from);
  GHPair(GHPair&& from) noexcept
    : GHPair() {
    *this = ::std::move(from);
  }

  inline GHPair& operator=(const GHPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHPair& operator=(GHPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GHPair& default_instance();

  static inline const GHPair* internal_default_instance() {
    return reinterpret_cast<const GHPair*>(
               &_GHPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GHPair& a, GHPair& b) {
    a.Swap(&b);
  }
  inline void Swap(GHPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GHPair* New() const final {
    return CreateMaybeMessage<GHPair>(nullptr);
  }

  GHPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GHPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GHPair& from);
  void MergeFrom(const GHPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHPair";
  }
  protected:
  explicit GHPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // double g = 1;
  void clear_g();
  double g() const;
  void set_g(double value);
  private:
  double _internal_g() const;
  void _internal_set_g(double value);
  public:

  // double h = 2;
  void clear_h();
  double h() const;
  void set_h(double value);
  private:
  double _internal_h() const;
  void _internal_set_h(double value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double g_;
  double h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHArray) */ {
 public:
  inline GHArray() : GHArray(nullptr) {}
  virtual ~GHArray();

  GHArray(const GHArray& from);
  GHArray(GHArray&& from) noexcept
    : GHArray() {
    *this = ::std::move(from);
  }

  inline GHArray& operator=(const GHArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHArray& operator=(GHArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GHArray& default_instance();

  static inline const GHArray* internal_default_instance() {
    return reinterpret_cast<const GHArray*>(
               &_GHArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GHArray& a, GHArray& b) {
    a.Swap(&b);
  }
  inline void Swap(GHArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GHArray* New() const final {
    return CreateMaybeMessage<GHArray>(nullptr);
  }

  GHArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GHArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GHArray& from);
  void MergeFrom(const GHArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHArray";
  }
  protected:
  explicit GHArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGFieldNumber = 1,
  };
  // repeated double g = 1 [packed = true];
  int g_size() const;
  private:
  int _internal_g_size() const;
  public:
  void clear_g();
  private:
  double _internal_g(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_g() const;
  void _internal_add_g(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_g();
  public:
  double g(int index) const;
  void set_g(int index, double value);
  void add_g(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      g() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_g();

  // @@protoc_insertion_point(class_scope:fedtree.GHArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > g_;
  mutable std::atomic<int> _g_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class GHPairEnc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.GHPairEnc) */ {
 public:
  inline GHPairEnc() : GHPairEnc(nullptr) {}
  virtual ~GHPairEnc();

  GHPairEnc(const GHPairEnc& from);
  GHPairEnc(GHPairEnc&& from) noexcept
    : GHPairEnc() {
    *this = ::std::move(from);
  }

  inline GHPairEnc& operator=(const GHPairEnc& from) {
    CopyFrom(from);
    return *this;
  }
  inline GHPairEnc& operator=(GHPairEnc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GHPairEnc& default_instance();

  static inline const GHPairEnc* internal_default_instance() {
    return reinterpret_cast<const GHPairEnc*>(
               &_GHPairEnc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GHPairEnc& a, GHPairEnc& b) {
    a.Swap(&b);
  }
  inline void Swap(GHPairEnc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GHPairEnc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GHPairEnc* New() const final {
    return CreateMaybeMessage<GHPairEnc>(nullptr);
  }

  GHPairEnc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GHPairEnc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GHPairEnc& from);
  void MergeFrom(const GHPairEnc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GHPairEnc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.GHPairEnc";
  }
  protected:
  explicit GHPairEnc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGEncFieldNumber = 1,
    kHEncFieldNumber = 2,
  };
  // string g_enc = 1;
  void clear_g_enc();
  const std::string& g_enc() const;
  void set_g_enc(const std::string& value);
  void set_g_enc(std::string&& value);
  void set_g_enc(const char* value);
  void set_g_enc(const char* value, size_t size);
  std::string* mutable_g_enc();
  std::string* release_g_enc();
  void set_allocated_g_enc(std::string* g_enc);
  private:
  const std::string& _internal_g_enc() const;
  void _internal_set_g_enc(const std::string& value);
  std::string* _internal_mutable_g_enc();
  public:

  // string h_enc = 2;
  void clear_h_enc();
  const std::string& h_enc() const;
  void set_h_enc(const std::string& value);
  void set_h_enc(std::string&& value);
  void set_h_enc(const char* value);
  void set_h_enc(const char* value, size_t size);
  std::string* mutable_h_enc();
  std::string* release_h_enc();
  void set_allocated_h_enc(std::string* h_enc);
  private:
  const std::string& _internal_h_enc() const;
  void _internal_set_h_enc(const std::string& value);
  std::string* _internal_mutable_h_enc();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.GHPairEnc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_enc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr h_enc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Paillier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Paillier) */ {
 public:
  inline Paillier() : Paillier(nullptr) {}
  virtual ~Paillier();

  Paillier(const Paillier& from);
  Paillier(Paillier&& from) noexcept
    : Paillier() {
    *this = ::std::move(from);
  }

  inline Paillier& operator=(const Paillier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Paillier& operator=(Paillier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Paillier& default_instance();

  static inline const Paillier* internal_default_instance() {
    return reinterpret_cast<const Paillier*>(
               &_Paillier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Paillier& a, Paillier& b) {
    a.Swap(&b);
  }
  inline void Swap(Paillier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Paillier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Paillier* New() const final {
    return CreateMaybeMessage<Paillier>(nullptr);
  }

  Paillier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Paillier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Paillier& from);
  void MergeFrom(const Paillier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Paillier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Paillier";
  }
  protected:
  explicit Paillier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulusFieldNumber = 1,
    kGeneratorFieldNumber = 2,
  };
  // string modulus = 1;
  void clear_modulus();
  const std::string& modulus() const;
  void set_modulus(const std::string& value);
  void set_modulus(std::string&& value);
  void set_modulus(const char* value);
  void set_modulus(const char* value, size_t size);
  std::string* mutable_modulus();
  std::string* release_modulus();
  void set_allocated_modulus(std::string* modulus);
  private:
  const std::string& _internal_modulus() const;
  void _internal_set_modulus(const std::string& value);
  std::string* _internal_mutable_modulus();
  public:

  // string generator = 2;
  void clear_generator();
  const std::string& generator() const;
  void set_generator(const std::string& value);
  void set_generator(std::string&& value);
  void set_generator(const char* value);
  void set_generator(const char* value, size_t size);
  std::string* mutable_generator();
  std::string* release_generator();
  void set_allocated_generator(std::string* generator);
  private:
  const std::string& _internal_generator() const;
  void _internal_set_generator(const std::string& value);
  std::string* _internal_mutable_generator();
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Paillier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class SplitPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.SplitPoint) */ {
 public:
  inline SplitPoint() : SplitPoint(nullptr) {}
  virtual ~SplitPoint();

  SplitPoint(const SplitPoint& from);
  SplitPoint(SplitPoint&& from) noexcept
    : SplitPoint() {
    *this = ::std::move(from);
  }

  inline SplitPoint& operator=(const SplitPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitPoint& operator=(SplitPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitPoint& default_instance();

  static inline const SplitPoint* internal_default_instance() {
    return reinterpret_cast<const SplitPoint*>(
               &_SplitPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SplitPoint& a, SplitPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitPoint* New() const final {
    return CreateMaybeMessage<SplitPoint>(nullptr);
  }

  SplitPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitPoint& from);
  void MergeFrom(const SplitPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.SplitPoint";
  }
  protected:
  explicit SplitPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGainFieldNumber = 1,
    kFeaMissingGFieldNumber = 2,
    kFeaMissingHFieldNumber = 3,
    kRchSumGFieldNumber = 4,
    kRchSumHFieldNumber = 5,
    kNidFieldNumber = 7,
    kSplitFeaIdFieldNumber = 8,
    kDefaultRightFieldNumber = 6,
    kNoSplitValueUpdateFieldNumber = 11,
    kFvalFieldNumber = 9,
    kSplitBidFieldNumber = 10,
  };
  // float gain = 1;
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // float fea_missing_g = 2;
  void clear_fea_missing_g();
  float fea_missing_g() const;
  void set_fea_missing_g(float value);
  private:
  float _internal_fea_missing_g() const;
  void _internal_set_fea_missing_g(float value);
  public:

  // float fea_missing_h = 3;
  void clear_fea_missing_h();
  float fea_missing_h() const;
  void set_fea_missing_h(float value);
  private:
  float _internal_fea_missing_h() const;
  void _internal_set_fea_missing_h(float value);
  public:

  // float rch_sum_g = 4;
  void clear_rch_sum_g();
  float rch_sum_g() const;
  void set_rch_sum_g(float value);
  private:
  float _internal_rch_sum_g() const;
  void _internal_set_rch_sum_g(float value);
  public:

  // float rch_sum_h = 5;
  void clear_rch_sum_h();
  float rch_sum_h() const;
  void set_rch_sum_h(float value);
  private:
  float _internal_rch_sum_h() const;
  void _internal_set_rch_sum_h(float value);
  public:

  // int32 nid = 7;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nid() const;
  void _internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 split_fea_id = 8;
  void clear_split_fea_id();
  ::PROTOBUF_NAMESPACE_ID::int32 split_fea_id() const;
  void set_split_fea_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_fea_id() const;
  void _internal_set_split_fea_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool default_right = 6;
  void clear_default_right();
  bool default_right() const;
  void set_default_right(bool value);
  private:
  bool _internal_default_right() const;
  void _internal_set_default_right(bool value);
  public:

  // bool no_split_value_update = 11;
  void clear_no_split_value_update();
  bool no_split_value_update() const;
  void set_no_split_value_update(bool value);
  private:
  bool _internal_no_split_value_update() const;
  void _internal_set_no_split_value_update(bool value);
  public:

  // float fval = 9;
  void clear_fval();
  float fval() const;
  void set_fval(float value);
  private:
  float _internal_fval() const;
  void _internal_set_fval(float value);
  public:

  // int32 split_bid = 10;
  void clear_split_bid();
  ::PROTOBUF_NAMESPACE_ID::int32 split_bid() const;
  void set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_bid() const;
  void _internal_set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.SplitPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float gain_;
  float fea_missing_g_;
  float fea_missing_h_;
  float rch_sum_g_;
  float rch_sum_h_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_fea_id_;
  bool default_right_;
  bool no_split_value_update_;
  float fval_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_bid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Score PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Score) */ {
 public:
  inline Score() : Score(nullptr) {}
  virtual ~Score();

  Score(const Score& from);
  Score(Score&& from) noexcept
    : Score() {
    *this = ::std::move(from);
  }

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }
  inline Score& operator=(Score&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Score& default_instance();

  static inline const Score* internal_default_instance() {
    return reinterpret_cast<const Score*>(
               &_Score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Score& a, Score& b) {
    a.Swap(&b);
  }
  inline void Swap(Score* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Score* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Score* New() const final {
    return CreateMaybeMessage<Score>(nullptr);
  }

  Score* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Score>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Score& from);
  void MergeFrom(const Score& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Score* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Score";
  }
  protected:
  explicit Score(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // float content = 1;
  void clear_content();
  float content() const;
  void set_content(float value);
  private:
  float _internal_content() const;
  void _internal_set_content(float value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Score)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class PID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.PID) */ {
 public:
  inline PID() : PID(nullptr) {}
  virtual ~PID();

  PID(const PID& from);
  PID(PID&& from) noexcept
    : PID() {
    *this = ::std::move(from);
  }

  inline PID& operator=(const PID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PID& operator=(PID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PID& default_instance();

  static inline const PID* internal_default_instance() {
    return reinterpret_cast<const PID*>(
               &_PID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PID& a, PID& b) {
    a.Swap(&b);
  }
  inline void Swap(PID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PID* New() const final {
    return CreateMaybeMessage<PID>(nullptr);
  }

  PID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PID& from);
  void MergeFrom(const PID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.PID";
  }
  protected:
  explicit PID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.PID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ready PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ready) */ {
 public:
  inline Ready() : Ready(nullptr) {}
  virtual ~Ready();

  Ready(const Ready& from);
  Ready(Ready&& from) noexcept
    : Ready() {
    *this = ::std::move(from);
  }

  inline Ready& operator=(const Ready& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ready& operator=(Ready&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ready& default_instance();

  static inline const Ready* internal_default_instance() {
    return reinterpret_cast<const Ready*>(
               &_Ready_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Ready& a, Ready& b) {
    a.Swap(&b);
  }
  inline void Swap(Ready* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ready* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ready* New() const final {
    return CreateMaybeMessage<Ready>(nullptr);
  }

  Ready* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ready>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ready& from);
  void MergeFrom(const Ready& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ready* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ready";
  }
  protected:
  explicit Ready(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyFieldNumber = 1,
  };
  // bool ready = 1;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Ready)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class DatasetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.DatasetInfo) */ {
 public:
  inline DatasetInfo() : DatasetInfo(nullptr) {}
  virtual ~DatasetInfo();

  DatasetInfo(const DatasetInfo& from);
  DatasetInfo(DatasetInfo&& from) noexcept
    : DatasetInfo() {
    *this = ::std::move(from);
  }

  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatasetInfo& operator=(DatasetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatasetInfo& default_instance();

  static inline const DatasetInfo* internal_default_instance() {
    return reinterpret_cast<const DatasetInfo*>(
               &_DatasetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DatasetInfo& a, DatasetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DatasetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatasetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatasetInfo* New() const final {
    return CreateMaybeMessage<DatasetInfo>(nullptr);
  }

  DatasetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatasetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatasetInfo& from);
  void MergeFrom(const DatasetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatasetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.DatasetInfo";
  }
  protected:
  explicit DatasetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNBinsFieldNumber = 1,
    kNColumnsFieldNumber = 2,
  };
  // int32 n_bins = 1;
  void clear_n_bins();
  ::PROTOBUF_NAMESPACE_ID::int32 n_bins() const;
  void set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_bins() const;
  void _internal_set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 n_columns = 2;
  void clear_n_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 n_columns() const;
  void set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_columns() const;
  void _internal_set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.DatasetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_bins_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class FID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.FID) */ {
 public:
  inline FID() : FID(nullptr) {}
  virtual ~FID();

  FID(const FID& from);
  FID(FID&& from) noexcept
    : FID() {
    *this = ::std::move(from);
  }

  inline FID& operator=(const FID& from) {
    CopyFrom(from);
    return *this;
  }
  inline FID& operator=(FID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FID& default_instance();

  static inline const FID* internal_default_instance() {
    return reinterpret_cast<const FID*>(
               &_FID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FID& a, FID& b) {
    a.Swap(&b);
  }
  inline void Swap(FID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FID* New() const final {
    return CreateMaybeMessage<FID>(nullptr);
  }

  FID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FID& from);
  void MergeFrom(const FID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.FID";
  }
  protected:
  explicit FID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.FID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class BestInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.BestInfo) */ {
 public:
  inline BestInfo() : BestInfo(nullptr) {}
  virtual ~BestInfo();

  BestInfo(const BestInfo& from);
  BestInfo(BestInfo&& from) noexcept
    : BestInfo() {
    *this = ::std::move(from);
  }

  inline BestInfo& operator=(const BestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BestInfo& operator=(BestInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BestInfo& default_instance();

  static inline const BestInfo* internal_default_instance() {
    return reinterpret_cast<const BestInfo*>(
               &_BestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BestInfo& a, BestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BestInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BestInfo* New() const final {
    return CreateMaybeMessage<BestInfo>(nullptr);
  }

  BestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BestInfo& from);
  void MergeFrom(const BestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.BestInfo";
  }
  protected:
  explicit BestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kNidFieldNumber = 2,
    kIdxFieldNumber = 3,
    kGlobalFidFieldNumber = 4,
    kGainFieldNumber = 5,
  };
  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nid = 2;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nid() const;
  void _internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 idx = 3;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 global_fid = 4;
  void clear_global_fid();
  ::PROTOBUF_NAMESPACE_ID::int32 global_fid() const;
  void set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_global_fid() const;
  void _internal_set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double gain = 5;
  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.BestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_fid_;
  double gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalIdFieldNumber = 1,
    kLchIndexFieldNumber = 2,
    kRchIndexFieldNumber = 3,
    kParentIndexFieldNumber = 4,
    kGainFieldNumber = 5,
    kBaseWeightFieldNumber = 6,
    kSplitFeatureIdFieldNumber = 7,
    kPidFieldNumber = 8,
    kSplitValueFieldNumber = 9,
    kSplitBidFieldNumber = 10,
    kDefaultRightFieldNumber = 11,
    kIsLeafFieldNumber = 12,
    kIsValidFieldNumber = 13,
    kIsPrunedFieldNumber = 14,
    kSumGhPairGFieldNumber = 15,
    kSumGhPairHFieldNumber = 16,
    kNInstancesFieldNumber = 17,
  };
  // int32 final_id = 1;
  void clear_final_id();
  ::PROTOBUF_NAMESPACE_ID::int32 final_id() const;
  void set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_id() const;
  void _internal_set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lch_index = 2;
  void clear_lch_index();
  ::PROTOBUF_NAMESPACE_ID::int32 lch_index() const;
  void set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lch_index() const;
  void _internal_set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rch_index = 3;
  void clear_rch_index();
  ::PROTOBUF_NAMESPACE_ID::int32 rch_index() const;
  void set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rch_index() const;
  void _internal_set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 parent_index = 4;
  void clear_parent_index();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_index() const;
  void set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_index() const;
  void _internal_set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float gain = 5;
  void clear_gain();
  float gain() const;
  void set_gain(float value);
  private:
  float _internal_gain() const;
  void _internal_set_gain(float value);
  public:

  // float base_weight = 6;
  void clear_base_weight();
  float base_weight() const;
  void set_base_weight(float value);
  private:
  float _internal_base_weight() const;
  void _internal_set_base_weight(float value);
  public:

  // int32 split_feature_id = 7;
  void clear_split_feature_id();
  ::PROTOBUF_NAMESPACE_ID::int32 split_feature_id() const;
  void set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_feature_id() const;
  void _internal_set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pid = 8;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float split_value = 9;
  void clear_split_value();
  float split_value() const;
  void set_split_value(float value);
  private:
  float _internal_split_value() const;
  void _internal_set_split_value(float value);
  public:

  // int32 split_bid = 10;
  void clear_split_bid();
  ::PROTOBUF_NAMESPACE_ID::int32 split_bid() const;
  void set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_split_bid() const;
  void _internal_set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool default_right = 11;
  void clear_default_right();
  bool default_right() const;
  void set_default_right(bool value);
  private:
  bool _internal_default_right() const;
  void _internal_set_default_right(bool value);
  public:

  // bool is_leaf = 12;
  void clear_is_leaf();
  bool is_leaf() const;
  void set_is_leaf(bool value);
  private:
  bool _internal_is_leaf() const;
  void _internal_set_is_leaf(bool value);
  public:

  // bool is_valid = 13;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // bool is_pruned = 14;
  void clear_is_pruned();
  bool is_pruned() const;
  void set_is_pruned(bool value);
  private:
  bool _internal_is_pruned() const;
  void _internal_set_is_pruned(bool value);
  public:

  // float sum_gh_pair_g = 15;
  void clear_sum_gh_pair_g();
  float sum_gh_pair_g() const;
  void set_sum_gh_pair_g(float value);
  private:
  float _internal_sum_gh_pair_g() const;
  void _internal_set_sum_gh_pair_g(float value);
  public:

  // float sum_gh_pair_h = 16;
  void clear_sum_gh_pair_h();
  float sum_gh_pair_h() const;
  void set_sum_gh_pair_h(float value);
  private:
  float _internal_sum_gh_pair_h() const;
  void _internal_set_sum_gh_pair_h(float value);
  public:

  // int32 n_instances = 17;
  void clear_n_instances();
  ::PROTOBUF_NAMESPACE_ID::int32 n_instances() const;
  void set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n_instances() const;
  void _internal_set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lch_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 rch_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_index_;
  float gain_;
  float base_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_feature_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  float split_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 split_bid_;
  bool default_right_;
  bool is_leaf_;
  bool is_valid_;
  bool is_pruned_;
  float sum_gh_pair_g_;
  float sum_gh_pair_h_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_instances_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ins2NodeID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ins2NodeID) */ {
 public:
  inline Ins2NodeID() : Ins2NodeID(nullptr) {}
  virtual ~Ins2NodeID();

  Ins2NodeID(const Ins2NodeID& from);
  Ins2NodeID(Ins2NodeID&& from) noexcept
    : Ins2NodeID() {
    *this = ::std::move(from);
  }

  inline Ins2NodeID& operator=(const Ins2NodeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ins2NodeID& operator=(Ins2NodeID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ins2NodeID& default_instance();

  static inline const Ins2NodeID* internal_default_instance() {
    return reinterpret_cast<const Ins2NodeID*>(
               &_Ins2NodeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Ins2NodeID& a, Ins2NodeID& b) {
    a.Swap(&b);
  }
  inline void Swap(Ins2NodeID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ins2NodeID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ins2NodeID* New() const final {
    return CreateMaybeMessage<Ins2NodeID>(nullptr);
  }

  Ins2NodeID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ins2NodeID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ins2NodeID& from);
  void MergeFrom(const Ins2NodeID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins2NodeID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ins2NodeID";
  }
  protected:
  explicit Ins2NodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kNidFieldNumber = 2,
  };
  // int32 iid = 1;
  void clear_iid();
  ::PROTOBUF_NAMESPACE_ID::int32 iid() const;
  void set_iid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iid() const;
  void _internal_set_iid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nid = 2;
  void clear_nid();
  ::PROTOBUF_NAMESPACE_ID::int32 nid() const;
  void set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nid() const;
  void _internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fedtree.Ins2NodeID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// -------------------------------------------------------------------

class Ins2NodeIDBatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fedtree.Ins2NodeIDBatch) */ {
 public:
  inline Ins2NodeIDBatch() : Ins2NodeIDBatch(nullptr) {}
  virtual ~Ins2NodeIDBatch();

  Ins2NodeIDBatch(const Ins2NodeIDBatch& from);
  Ins2NodeIDBatch(Ins2NodeIDBatch&& from) noexcept
    : Ins2NodeIDBatch() {
    *this = ::std::move(from);
  }

  inline Ins2NodeIDBatch& operator=(const Ins2NodeIDBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ins2NodeIDBatch& operator=(Ins2NodeIDBatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ins2NodeIDBatch& default_instance();

  static inline const Ins2NodeIDBatch* internal_default_instance() {
    return reinterpret_cast<const Ins2NodeIDBatch*>(
               &_Ins2NodeIDBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Ins2NodeIDBatch& a, Ins2NodeIDBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(Ins2NodeIDBatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ins2NodeIDBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ins2NodeIDBatch* New() const final {
    return CreateMaybeMessage<Ins2NodeIDBatch>(nullptr);
  }

  Ins2NodeIDBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ins2NodeIDBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ins2NodeIDBatch& from);
  void MergeFrom(const Ins2NodeIDBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins2NodeIDBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fedtree.Ins2NodeIDBatch";
  }
  protected:
  explicit Ins2NodeIDBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fedtree_2eproto);
    return ::descriptor_table_fedtree_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIidFieldNumber = 1,
    kNidFieldNumber = 2,
  };
  // repeated int32 iid = 1 [packed = true];
  int iid_size() const;
  private:
  int _internal_iid_size() const;
  public:
  void clear_iid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_iid() const;
  void _internal_add_iid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_iid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 iid(int index) const;
  void set_iid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_iid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      iid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_iid();

  // repeated int32 nid = 2 [packed = true];
  int nid_size() const;
  private:
  int _internal_nid_size() const;
  public:
  void clear_nid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_nid() const;
  void _internal_add_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_nid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 nid(int index) const;
  void set_nid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_nid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      nid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_nid();

  // @@protoc_insertion_point(class_scope:fedtree.Ins2NodeIDBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > iid_;
  mutable std::atomic<int> _iid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > nid_;
  mutable std::atomic<int> _nid_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fedtree_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FIDBatch

// repeated int32 id = 1 [packed = true];
inline int FIDBatch::_internal_id_size() const {
  return id_.size();
}
inline int FIDBatch::id_size() const {
  return _internal_id_size();
}
inline void FIDBatch::clear_id() {
  id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FIDBatch::_internal_id(int index) const {
  return id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FIDBatch::id(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.FIDBatch.id)
  return _internal_id(index);
}
inline void FIDBatch::set_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.FIDBatch.id)
}
inline void FIDBatch::_internal_add_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_.Add(value);
}
inline void FIDBatch::add_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:fedtree.FIDBatch.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FIDBatch::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FIDBatch::id() const {
  // @@protoc_insertion_point(field_list:fedtree.FIDBatch.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FIDBatch::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FIDBatch::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.FIDBatch.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// GHBatch

// repeated double g = 1 [packed = true];
inline int GHBatch::_internal_g_size() const {
  return g_.size();
}
inline int GHBatch::g_size() const {
  return _internal_g_size();
}
inline void GHBatch::clear_g() {
  g_.Clear();
}
inline double GHBatch::_internal_g(int index) const {
  return g_.Get(index);
}
inline double GHBatch::g(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHBatch.g)
  return _internal_g(index);
}
inline void GHBatch::set_g(int index, double value) {
  g_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.GHBatch.g)
}
inline void GHBatch::_internal_add_g(double value) {
  g_.Add(value);
}
inline void GHBatch::add_g(double value) {
  _internal_add_g(value);
  // @@protoc_insertion_point(field_add:fedtree.GHBatch.g)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::_internal_g() const {
  return g_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::g() const {
  // @@protoc_insertion_point(field_list:fedtree.GHBatch.g)
  return _internal_g();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::_internal_mutable_g() {
  return &g_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::mutable_g() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHBatch.g)
  return _internal_mutable_g();
}

// repeated double h = 2 [packed = true];
inline int GHBatch::_internal_h_size() const {
  return h_.size();
}
inline int GHBatch::h_size() const {
  return _internal_h_size();
}
inline void GHBatch::clear_h() {
  h_.Clear();
}
inline double GHBatch::_internal_h(int index) const {
  return h_.Get(index);
}
inline double GHBatch::h(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHBatch.h)
  return _internal_h(index);
}
inline void GHBatch::set_h(int index, double value) {
  h_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.GHBatch.h)
}
inline void GHBatch::_internal_add_h(double value) {
  h_.Add(value);
}
inline void GHBatch::add_h(double value) {
  _internal_add_h(value);
  // @@protoc_insertion_point(field_add:fedtree.GHBatch.h)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::_internal_h() const {
  return h_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHBatch::h() const {
  // @@protoc_insertion_point(field_list:fedtree.GHBatch.h)
  return _internal_h();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::_internal_mutable_h() {
  return &h_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHBatch::mutable_h() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHBatch.h)
  return _internal_mutable_h();
}

// -------------------------------------------------------------------

// GHEncBatch

// repeated string g_enc = 1;
inline int GHEncBatch::_internal_g_enc_size() const {
  return g_enc_.size();
}
inline int GHEncBatch::g_enc_size() const {
  return _internal_g_enc_size();
}
inline void GHEncBatch::clear_g_enc() {
  g_enc_.Clear();
}
inline std::string* GHEncBatch::add_g_enc() {
  // @@protoc_insertion_point(field_add_mutable:fedtree.GHEncBatch.g_enc)
  return _internal_add_g_enc();
}
inline const std::string& GHEncBatch::_internal_g_enc(int index) const {
  return g_enc_.Get(index);
}
inline const std::string& GHEncBatch::g_enc(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHEncBatch.g_enc)
  return _internal_g_enc(index);
}
inline std::string* GHEncBatch::mutable_g_enc(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.GHEncBatch.g_enc)
  return g_enc_.Mutable(index);
}
inline void GHEncBatch::set_g_enc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.g_enc)
  g_enc_.Mutable(index)->assign(value);
}
inline void GHEncBatch::set_g_enc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.g_enc)
  g_enc_.Mutable(index)->assign(std::move(value));
}
inline void GHEncBatch::set_g_enc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  g_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::set_g_enc(int index, const char* value, size_t size) {
  g_enc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.GHEncBatch.g_enc)
}
inline std::string* GHEncBatch::_internal_add_g_enc() {
  return g_enc_.Add();
}
inline void GHEncBatch::add_g_enc(const std::string& value) {
  g_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::add_g_enc(std::string&& value) {
  g_enc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::add_g_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  g_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.GHEncBatch.g_enc)
}
inline void GHEncBatch::add_g_enc(const char* value, size_t size) {
  g_enc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.GHEncBatch.g_enc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GHEncBatch::g_enc() const {
  // @@protoc_insertion_point(field_list:fedtree.GHEncBatch.g_enc)
  return g_enc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GHEncBatch::mutable_g_enc() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHEncBatch.g_enc)
  return &g_enc_;
}

// repeated string h_enc = 2;
inline int GHEncBatch::_internal_h_enc_size() const {
  return h_enc_.size();
}
inline int GHEncBatch::h_enc_size() const {
  return _internal_h_enc_size();
}
inline void GHEncBatch::clear_h_enc() {
  h_enc_.Clear();
}
inline std::string* GHEncBatch::add_h_enc() {
  // @@protoc_insertion_point(field_add_mutable:fedtree.GHEncBatch.h_enc)
  return _internal_add_h_enc();
}
inline const std::string& GHEncBatch::_internal_h_enc(int index) const {
  return h_enc_.Get(index);
}
inline const std::string& GHEncBatch::h_enc(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHEncBatch.h_enc)
  return _internal_h_enc(index);
}
inline std::string* GHEncBatch::mutable_h_enc(int index) {
  // @@protoc_insertion_point(field_mutable:fedtree.GHEncBatch.h_enc)
  return h_enc_.Mutable(index);
}
inline void GHEncBatch::set_h_enc(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.h_enc)
  h_enc_.Mutable(index)->assign(value);
}
inline void GHEncBatch::set_h_enc(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:fedtree.GHEncBatch.h_enc)
  h_enc_.Mutable(index)->assign(std::move(value));
}
inline void GHEncBatch::set_h_enc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  h_enc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::set_h_enc(int index, const char* value, size_t size) {
  h_enc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fedtree.GHEncBatch.h_enc)
}
inline std::string* GHEncBatch::_internal_add_h_enc() {
  return h_enc_.Add();
}
inline void GHEncBatch::add_h_enc(const std::string& value) {
  h_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::add_h_enc(std::string&& value) {
  h_enc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::add_h_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  h_enc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fedtree.GHEncBatch.h_enc)
}
inline void GHEncBatch::add_h_enc(const char* value, size_t size) {
  h_enc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fedtree.GHEncBatch.h_enc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GHEncBatch::h_enc() const {
  // @@protoc_insertion_point(field_list:fedtree.GHEncBatch.h_enc)
  return h_enc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GHEncBatch::mutable_h_enc() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHEncBatch.h_enc)
  return &h_enc_;
}

// -------------------------------------------------------------------

// GHPair

// double g = 1;
inline void GHPair::clear_g() {
  g_ = 0;
}
inline double GHPair::_internal_g() const {
  return g_;
}
inline double GHPair::g() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPair.g)
  return _internal_g();
}
inline void GHPair::_internal_set_g(double value) {
  
  g_ = value;
}
inline void GHPair::set_g(double value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPair.g)
}

// double h = 2;
inline void GHPair::clear_h() {
  h_ = 0;
}
inline double GHPair::_internal_h() const {
  return h_;
}
inline double GHPair::h() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPair.h)
  return _internal_h();
}
inline void GHPair::_internal_set_h(double value) {
  
  h_ = value;
}
inline void GHPair::set_h(double value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPair.h)
}

// -------------------------------------------------------------------

// GHArray

// repeated double g = 1 [packed = true];
inline int GHArray::_internal_g_size() const {
  return g_.size();
}
inline int GHArray::g_size() const {
  return _internal_g_size();
}
inline void GHArray::clear_g() {
  g_.Clear();
}
inline double GHArray::_internal_g(int index) const {
  return g_.Get(index);
}
inline double GHArray::g(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.GHArray.g)
  return _internal_g(index);
}
inline void GHArray::set_g(int index, double value) {
  g_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.GHArray.g)
}
inline void GHArray::_internal_add_g(double value) {
  g_.Add(value);
}
inline void GHArray::add_g(double value) {
  _internal_add_g(value);
  // @@protoc_insertion_point(field_add:fedtree.GHArray.g)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHArray::_internal_g() const {
  return g_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GHArray::g() const {
  // @@protoc_insertion_point(field_list:fedtree.GHArray.g)
  return _internal_g();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHArray::_internal_mutable_g() {
  return &g_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GHArray::mutable_g() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.GHArray.g)
  return _internal_mutable_g();
}

// -------------------------------------------------------------------

// GHPairEnc

// string g_enc = 1;
inline void GHPairEnc::clear_g_enc() {
  g_enc_.ClearToEmpty();
}
inline const std::string& GHPairEnc::g_enc() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPairEnc.g_enc)
  return _internal_g_enc();
}
inline void GHPairEnc::set_g_enc(const std::string& value) {
  _internal_set_g_enc(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPairEnc.g_enc)
}
inline std::string* GHPairEnc::mutable_g_enc() {
  // @@protoc_insertion_point(field_mutable:fedtree.GHPairEnc.g_enc)
  return _internal_mutable_g_enc();
}
inline const std::string& GHPairEnc::_internal_g_enc() const {
  return g_enc_.Get();
}
inline void GHPairEnc::_internal_set_g_enc(const std::string& value) {
  
  g_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GHPairEnc::set_g_enc(std::string&& value) {
  
  g_enc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fedtree.GHPairEnc.g_enc)
}
inline void GHPairEnc::set_g_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  g_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fedtree.GHPairEnc.g_enc)
}
inline void GHPairEnc::set_g_enc(const char* value,
    size_t size) {
  
  g_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fedtree.GHPairEnc.g_enc)
}
inline std::string* GHPairEnc::_internal_mutable_g_enc() {
  
  return g_enc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GHPairEnc::release_g_enc() {
  // @@protoc_insertion_point(field_release:fedtree.GHPairEnc.g_enc)
  return g_enc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GHPairEnc::set_allocated_g_enc(std::string* g_enc) {
  if (g_enc != nullptr) {
    
  } else {
    
  }
  g_enc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g_enc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fedtree.GHPairEnc.g_enc)
}

// string h_enc = 2;
inline void GHPairEnc::clear_h_enc() {
  h_enc_.ClearToEmpty();
}
inline const std::string& GHPairEnc::h_enc() const {
  // @@protoc_insertion_point(field_get:fedtree.GHPairEnc.h_enc)
  return _internal_h_enc();
}
inline void GHPairEnc::set_h_enc(const std::string& value) {
  _internal_set_h_enc(value);
  // @@protoc_insertion_point(field_set:fedtree.GHPairEnc.h_enc)
}
inline std::string* GHPairEnc::mutable_h_enc() {
  // @@protoc_insertion_point(field_mutable:fedtree.GHPairEnc.h_enc)
  return _internal_mutable_h_enc();
}
inline const std::string& GHPairEnc::_internal_h_enc() const {
  return h_enc_.Get();
}
inline void GHPairEnc::_internal_set_h_enc(const std::string& value) {
  
  h_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GHPairEnc::set_h_enc(std::string&& value) {
  
  h_enc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fedtree.GHPairEnc.h_enc)
}
inline void GHPairEnc::set_h_enc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  h_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fedtree.GHPairEnc.h_enc)
}
inline void GHPairEnc::set_h_enc(const char* value,
    size_t size) {
  
  h_enc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fedtree.GHPairEnc.h_enc)
}
inline std::string* GHPairEnc::_internal_mutable_h_enc() {
  
  return h_enc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GHPairEnc::release_h_enc() {
  // @@protoc_insertion_point(field_release:fedtree.GHPairEnc.h_enc)
  return h_enc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GHPairEnc::set_allocated_h_enc(std::string* h_enc) {
  if (h_enc != nullptr) {
    
  } else {
    
  }
  h_enc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), h_enc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fedtree.GHPairEnc.h_enc)
}

// -------------------------------------------------------------------

// Paillier

// string modulus = 1;
inline void Paillier::clear_modulus() {
  modulus_.ClearToEmpty();
}
inline const std::string& Paillier::modulus() const {
  // @@protoc_insertion_point(field_get:fedtree.Paillier.modulus)
  return _internal_modulus();
}
inline void Paillier::set_modulus(const std::string& value) {
  _internal_set_modulus(value);
  // @@protoc_insertion_point(field_set:fedtree.Paillier.modulus)
}
inline std::string* Paillier::mutable_modulus() {
  // @@protoc_insertion_point(field_mutable:fedtree.Paillier.modulus)
  return _internal_mutable_modulus();
}
inline const std::string& Paillier::_internal_modulus() const {
  return modulus_.Get();
}
inline void Paillier::_internal_set_modulus(const std::string& value) {
  
  modulus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Paillier::set_modulus(std::string&& value) {
  
  modulus_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fedtree.Paillier.modulus)
}
inline void Paillier::set_modulus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modulus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fedtree.Paillier.modulus)
}
inline void Paillier::set_modulus(const char* value,
    size_t size) {
  
  modulus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fedtree.Paillier.modulus)
}
inline std::string* Paillier::_internal_mutable_modulus() {
  
  return modulus_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Paillier::release_modulus() {
  // @@protoc_insertion_point(field_release:fedtree.Paillier.modulus)
  return modulus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Paillier::set_allocated_modulus(std::string* modulus) {
  if (modulus != nullptr) {
    
  } else {
    
  }
  modulus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modulus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fedtree.Paillier.modulus)
}

// string generator = 2;
inline void Paillier::clear_generator() {
  generator_.ClearToEmpty();
}
inline const std::string& Paillier::generator() const {
  // @@protoc_insertion_point(field_get:fedtree.Paillier.generator)
  return _internal_generator();
}
inline void Paillier::set_generator(const std::string& value) {
  _internal_set_generator(value);
  // @@protoc_insertion_point(field_set:fedtree.Paillier.generator)
}
inline std::string* Paillier::mutable_generator() {
  // @@protoc_insertion_point(field_mutable:fedtree.Paillier.generator)
  return _internal_mutable_generator();
}
inline const std::string& Paillier::_internal_generator() const {
  return generator_.Get();
}
inline void Paillier::_internal_set_generator(const std::string& value) {
  
  generator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Paillier::set_generator(std::string&& value) {
  
  generator_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fedtree.Paillier.generator)
}
inline void Paillier::set_generator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  generator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fedtree.Paillier.generator)
}
inline void Paillier::set_generator(const char* value,
    size_t size) {
  
  generator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fedtree.Paillier.generator)
}
inline std::string* Paillier::_internal_mutable_generator() {
  
  return generator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Paillier::release_generator() {
  // @@protoc_insertion_point(field_release:fedtree.Paillier.generator)
  return generator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Paillier::set_allocated_generator(std::string* generator) {
  if (generator != nullptr) {
    
  } else {
    
  }
  generator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), generator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fedtree.Paillier.generator)
}

// -------------------------------------------------------------------

// SplitPoint

// float gain = 1;
inline void SplitPoint::clear_gain() {
  gain_ = 0;
}
inline float SplitPoint::_internal_gain() const {
  return gain_;
}
inline float SplitPoint::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.gain)
  return _internal_gain();
}
inline void SplitPoint::_internal_set_gain(float value) {
  
  gain_ = value;
}
inline void SplitPoint::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.gain)
}

// float fea_missing_g = 2;
inline void SplitPoint::clear_fea_missing_g() {
  fea_missing_g_ = 0;
}
inline float SplitPoint::_internal_fea_missing_g() const {
  return fea_missing_g_;
}
inline float SplitPoint::fea_missing_g() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.fea_missing_g)
  return _internal_fea_missing_g();
}
inline void SplitPoint::_internal_set_fea_missing_g(float value) {
  
  fea_missing_g_ = value;
}
inline void SplitPoint::set_fea_missing_g(float value) {
  _internal_set_fea_missing_g(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.fea_missing_g)
}

// float fea_missing_h = 3;
inline void SplitPoint::clear_fea_missing_h() {
  fea_missing_h_ = 0;
}
inline float SplitPoint::_internal_fea_missing_h() const {
  return fea_missing_h_;
}
inline float SplitPoint::fea_missing_h() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.fea_missing_h)
  return _internal_fea_missing_h();
}
inline void SplitPoint::_internal_set_fea_missing_h(float value) {
  
  fea_missing_h_ = value;
}
inline void SplitPoint::set_fea_missing_h(float value) {
  _internal_set_fea_missing_h(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.fea_missing_h)
}

// float rch_sum_g = 4;
inline void SplitPoint::clear_rch_sum_g() {
  rch_sum_g_ = 0;
}
inline float SplitPoint::_internal_rch_sum_g() const {
  return rch_sum_g_;
}
inline float SplitPoint::rch_sum_g() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.rch_sum_g)
  return _internal_rch_sum_g();
}
inline void SplitPoint::_internal_set_rch_sum_g(float value) {
  
  rch_sum_g_ = value;
}
inline void SplitPoint::set_rch_sum_g(float value) {
  _internal_set_rch_sum_g(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.rch_sum_g)
}

// float rch_sum_h = 5;
inline void SplitPoint::clear_rch_sum_h() {
  rch_sum_h_ = 0;
}
inline float SplitPoint::_internal_rch_sum_h() const {
  return rch_sum_h_;
}
inline float SplitPoint::rch_sum_h() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.rch_sum_h)
  return _internal_rch_sum_h();
}
inline void SplitPoint::_internal_set_rch_sum_h(float value) {
  
  rch_sum_h_ = value;
}
inline void SplitPoint::set_rch_sum_h(float value) {
  _internal_set_rch_sum_h(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.rch_sum_h)
}

// bool default_right = 6;
inline void SplitPoint::clear_default_right() {
  default_right_ = false;
}
inline bool SplitPoint::_internal_default_right() const {
  return default_right_;
}
inline bool SplitPoint::default_right() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.default_right)
  return _internal_default_right();
}
inline void SplitPoint::_internal_set_default_right(bool value) {
  
  default_right_ = value;
}
inline void SplitPoint::set_default_right(bool value) {
  _internal_set_default_right(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.default_right)
}

// int32 nid = 7;
inline void SplitPoint::clear_nid() {
  nid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitPoint::_internal_nid() const {
  return nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitPoint::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.nid)
  return _internal_nid();
}
inline void SplitPoint::_internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nid_ = value;
}
inline void SplitPoint::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.nid)
}

// int32 split_fea_id = 8;
inline void SplitPoint::clear_split_fea_id() {
  split_fea_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitPoint::_internal_split_fea_id() const {
  return split_fea_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitPoint::split_fea_id() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.split_fea_id)
  return _internal_split_fea_id();
}
inline void SplitPoint::_internal_set_split_fea_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_fea_id_ = value;
}
inline void SplitPoint::set_split_fea_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_fea_id(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.split_fea_id)
}

// float fval = 9;
inline void SplitPoint::clear_fval() {
  fval_ = 0;
}
inline float SplitPoint::_internal_fval() const {
  return fval_;
}
inline float SplitPoint::fval() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.fval)
  return _internal_fval();
}
inline void SplitPoint::_internal_set_fval(float value) {
  
  fval_ = value;
}
inline void SplitPoint::set_fval(float value) {
  _internal_set_fval(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.fval)
}

// int32 split_bid = 10;
inline void SplitPoint::clear_split_bid() {
  split_bid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitPoint::_internal_split_bid() const {
  return split_bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SplitPoint::split_bid() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.split_bid)
  return _internal_split_bid();
}
inline void SplitPoint::_internal_set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_bid_ = value;
}
inline void SplitPoint::set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_bid(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.split_bid)
}

// bool no_split_value_update = 11;
inline void SplitPoint::clear_no_split_value_update() {
  no_split_value_update_ = false;
}
inline bool SplitPoint::_internal_no_split_value_update() const {
  return no_split_value_update_;
}
inline bool SplitPoint::no_split_value_update() const {
  // @@protoc_insertion_point(field_get:fedtree.SplitPoint.no_split_value_update)
  return _internal_no_split_value_update();
}
inline void SplitPoint::_internal_set_no_split_value_update(bool value) {
  
  no_split_value_update_ = value;
}
inline void SplitPoint::set_no_split_value_update(bool value) {
  _internal_set_no_split_value_update(value);
  // @@protoc_insertion_point(field_set:fedtree.SplitPoint.no_split_value_update)
}

// -------------------------------------------------------------------

// Score

// float content = 1;
inline void Score::clear_content() {
  content_ = 0;
}
inline float Score::_internal_content() const {
  return content_;
}
inline float Score::content() const {
  // @@protoc_insertion_point(field_get:fedtree.Score.content)
  return _internal_content();
}
inline void Score::_internal_set_content(float value) {
  
  content_ = value;
}
inline void Score::set_content(float value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:fedtree.Score.content)
}

// -------------------------------------------------------------------

// PID

// int32 id = 1;
inline void PID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PID::id() const {
  // @@protoc_insertion_point(field_get:fedtree.PID.id)
  return _internal_id();
}
inline void PID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fedtree.PID.id)
}

// -------------------------------------------------------------------

// Ready

// bool ready = 1;
inline void Ready::clear_ready() {
  ready_ = false;
}
inline bool Ready::_internal_ready() const {
  return ready_;
}
inline bool Ready::ready() const {
  // @@protoc_insertion_point(field_get:fedtree.Ready.ready)
  return _internal_ready();
}
inline void Ready::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void Ready::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:fedtree.Ready.ready)
}

// -------------------------------------------------------------------

// DatasetInfo

// int32 n_bins = 1;
inline void DatasetInfo::clear_n_bins() {
  n_bins_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::_internal_n_bins() const {
  return n_bins_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::n_bins() const {
  // @@protoc_insertion_point(field_get:fedtree.DatasetInfo.n_bins)
  return _internal_n_bins();
}
inline void DatasetInfo::_internal_set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_bins_ = value;
}
inline void DatasetInfo::set_n_bins(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_bins(value);
  // @@protoc_insertion_point(field_set:fedtree.DatasetInfo.n_bins)
}

// int32 n_columns = 2;
inline void DatasetInfo::clear_n_columns() {
  n_columns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::_internal_n_columns() const {
  return n_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatasetInfo::n_columns() const {
  // @@protoc_insertion_point(field_get:fedtree.DatasetInfo.n_columns)
  return _internal_n_columns();
}
inline void DatasetInfo::_internal_set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_columns_ = value;
}
inline void DatasetInfo::set_n_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_columns(value);
  // @@protoc_insertion_point(field_set:fedtree.DatasetInfo.n_columns)
}

// -------------------------------------------------------------------

// FID

// int32 id = 1;
inline void FID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FID::id() const {
  // @@protoc_insertion_point(field_get:fedtree.FID.id)
  return _internal_id();
}
inline void FID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void FID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fedtree.FID.id)
}

// -------------------------------------------------------------------

// BestInfo

// int32 pid = 1;
inline void BestInfo::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.pid)
  return _internal_pid();
}
inline void BestInfo::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void BestInfo::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.pid)
}

// int32 nid = 2;
inline void BestInfo::clear_nid() {
  nid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_nid() const {
  return nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.nid)
  return _internal_nid();
}
inline void BestInfo::_internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nid_ = value;
}
inline void BestInfo::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.nid)
}

// int32 idx = 3;
inline void BestInfo::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::idx() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.idx)
  return _internal_idx();
}
inline void BestInfo::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void BestInfo::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.idx)
}

// int32 global_fid = 4;
inline void BestInfo::clear_global_fid() {
  global_fid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::_internal_global_fid() const {
  return global_fid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BestInfo::global_fid() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.global_fid)
  return _internal_global_fid();
}
inline void BestInfo::_internal_set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  global_fid_ = value;
}
inline void BestInfo::set_global_fid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_global_fid(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.global_fid)
}

// double gain = 5;
inline void BestInfo::clear_gain() {
  gain_ = 0;
}
inline double BestInfo::_internal_gain() const {
  return gain_;
}
inline double BestInfo::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.BestInfo.gain)
  return _internal_gain();
}
inline void BestInfo::_internal_set_gain(double value) {
  
  gain_ = value;
}
inline void BestInfo::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.BestInfo.gain)
}

// -------------------------------------------------------------------

// Node

// int32 final_id = 1;
inline void Node::clear_final_id() {
  final_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_final_id() const {
  return final_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::final_id() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.final_id)
  return _internal_final_id();
}
inline void Node::_internal_set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  final_id_ = value;
}
inline void Node::set_final_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_id(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.final_id)
}

// int32 lch_index = 2;
inline void Node::clear_lch_index() {
  lch_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_lch_index() const {
  return lch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::lch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.lch_index)
  return _internal_lch_index();
}
inline void Node::_internal_set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lch_index_ = value;
}
inline void Node::set_lch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.lch_index)
}

// int32 rch_index = 3;
inline void Node::clear_rch_index() {
  rch_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_rch_index() const {
  return rch_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::rch_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.rch_index)
  return _internal_rch_index();
}
inline void Node::_internal_set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rch_index_ = value;
}
inline void Node::set_rch_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rch_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.rch_index)
}

// int32 parent_index = 4;
inline void Node::clear_parent_index() {
  parent_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_parent_index() const {
  return parent_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::parent_index() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.parent_index)
  return _internal_parent_index();
}
inline void Node::_internal_set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_index_ = value;
}
inline void Node::set_parent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_index(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.parent_index)
}

// float gain = 5;
inline void Node::clear_gain() {
  gain_ = 0;
}
inline float Node::_internal_gain() const {
  return gain_;
}
inline float Node::gain() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.gain)
  return _internal_gain();
}
inline void Node::_internal_set_gain(float value) {
  
  gain_ = value;
}
inline void Node::set_gain(float value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.gain)
}

// float base_weight = 6;
inline void Node::clear_base_weight() {
  base_weight_ = 0;
}
inline float Node::_internal_base_weight() const {
  return base_weight_;
}
inline float Node::base_weight() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.base_weight)
  return _internal_base_weight();
}
inline void Node::_internal_set_base_weight(float value) {
  
  base_weight_ = value;
}
inline void Node::set_base_weight(float value) {
  _internal_set_base_weight(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.base_weight)
}

// int32 split_feature_id = 7;
inline void Node::clear_split_feature_id() {
  split_feature_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_split_feature_id() const {
  return split_feature_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::split_feature_id() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_feature_id)
  return _internal_split_feature_id();
}
inline void Node::_internal_set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_feature_id_ = value;
}
inline void Node::set_split_feature_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_feature_id(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_feature_id)
}

// int32 pid = 8;
inline void Node::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::pid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.pid)
  return _internal_pid();
}
inline void Node::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void Node::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.pid)
}

// float split_value = 9;
inline void Node::clear_split_value() {
  split_value_ = 0;
}
inline float Node::_internal_split_value() const {
  return split_value_;
}
inline float Node::split_value() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_value)
  return _internal_split_value();
}
inline void Node::_internal_set_split_value(float value) {
  
  split_value_ = value;
}
inline void Node::set_split_value(float value) {
  _internal_set_split_value(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_value)
}

// int32 split_bid = 10;
inline void Node::clear_split_bid() {
  split_bid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_split_bid() const {
  return split_bid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::split_bid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.split_bid)
  return _internal_split_bid();
}
inline void Node::_internal_set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  split_bid_ = value;
}
inline void Node::set_split_bid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_split_bid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.split_bid)
}

// bool default_right = 11;
inline void Node::clear_default_right() {
  default_right_ = false;
}
inline bool Node::_internal_default_right() const {
  return default_right_;
}
inline bool Node::default_right() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.default_right)
  return _internal_default_right();
}
inline void Node::_internal_set_default_right(bool value) {
  
  default_right_ = value;
}
inline void Node::set_default_right(bool value) {
  _internal_set_default_right(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.default_right)
}

// bool is_leaf = 12;
inline void Node::clear_is_leaf() {
  is_leaf_ = false;
}
inline bool Node::_internal_is_leaf() const {
  return is_leaf_;
}
inline bool Node::is_leaf() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_leaf)
  return _internal_is_leaf();
}
inline void Node::_internal_set_is_leaf(bool value) {
  
  is_leaf_ = value;
}
inline void Node::set_is_leaf(bool value) {
  _internal_set_is_leaf(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_leaf)
}

// bool is_valid = 13;
inline void Node::clear_is_valid() {
  is_valid_ = false;
}
inline bool Node::_internal_is_valid() const {
  return is_valid_;
}
inline bool Node::is_valid() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_valid)
  return _internal_is_valid();
}
inline void Node::_internal_set_is_valid(bool value) {
  
  is_valid_ = value;
}
inline void Node::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_valid)
}

// bool is_pruned = 14;
inline void Node::clear_is_pruned() {
  is_pruned_ = false;
}
inline bool Node::_internal_is_pruned() const {
  return is_pruned_;
}
inline bool Node::is_pruned() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.is_pruned)
  return _internal_is_pruned();
}
inline void Node::_internal_set_is_pruned(bool value) {
  
  is_pruned_ = value;
}
inline void Node::set_is_pruned(bool value) {
  _internal_set_is_pruned(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.is_pruned)
}

// float sum_gh_pair_g = 15;
inline void Node::clear_sum_gh_pair_g() {
  sum_gh_pair_g_ = 0;
}
inline float Node::_internal_sum_gh_pair_g() const {
  return sum_gh_pair_g_;
}
inline float Node::sum_gh_pair_g() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.sum_gh_pair_g)
  return _internal_sum_gh_pair_g();
}
inline void Node::_internal_set_sum_gh_pair_g(float value) {
  
  sum_gh_pair_g_ = value;
}
inline void Node::set_sum_gh_pair_g(float value) {
  _internal_set_sum_gh_pair_g(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.sum_gh_pair_g)
}

// float sum_gh_pair_h = 16;
inline void Node::clear_sum_gh_pair_h() {
  sum_gh_pair_h_ = 0;
}
inline float Node::_internal_sum_gh_pair_h() const {
  return sum_gh_pair_h_;
}
inline float Node::sum_gh_pair_h() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.sum_gh_pair_h)
  return _internal_sum_gh_pair_h();
}
inline void Node::_internal_set_sum_gh_pair_h(float value) {
  
  sum_gh_pair_h_ = value;
}
inline void Node::set_sum_gh_pair_h(float value) {
  _internal_set_sum_gh_pair_h(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.sum_gh_pair_h)
}

// int32 n_instances = 17;
inline void Node::clear_n_instances() {
  n_instances_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_n_instances() const {
  return n_instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::n_instances() const {
  // @@protoc_insertion_point(field_get:fedtree.Node.n_instances)
  return _internal_n_instances();
}
inline void Node::_internal_set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_instances_ = value;
}
inline void Node::set_n_instances(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n_instances(value);
  // @@protoc_insertion_point(field_set:fedtree.Node.n_instances)
}

// -------------------------------------------------------------------

// Ins2NodeID

// int32 iid = 1;
inline void Ins2NodeID::clear_iid() {
  iid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::_internal_iid() const {
  return iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::iid() const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeID.iid)
  return _internal_iid();
}
inline void Ins2NodeID::_internal_set_iid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iid_ = value;
}
inline void Ins2NodeID::set_iid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeID.iid)
}

// int32 nid = 2;
inline void Ins2NodeID::clear_nid() {
  nid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::_internal_nid() const {
  return nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeID::nid() const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeID.nid)
  return _internal_nid();
}
inline void Ins2NodeID::_internal_set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nid_ = value;
}
inline void Ins2NodeID::set_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nid(value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeID.nid)
}

// -------------------------------------------------------------------

// Ins2NodeIDBatch

// repeated int32 iid = 1 [packed = true];
inline int Ins2NodeIDBatch::_internal_iid_size() const {
  return iid_.size();
}
inline int Ins2NodeIDBatch::iid_size() const {
  return _internal_iid_size();
}
inline void Ins2NodeIDBatch::clear_iid() {
  iid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeIDBatch::_internal_iid(int index) const {
  return iid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeIDBatch::iid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeIDBatch.iid)
  return _internal_iid(index);
}
inline void Ins2NodeIDBatch::set_iid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  iid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeIDBatch.iid)
}
inline void Ins2NodeIDBatch::_internal_add_iid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  iid_.Add(value);
}
inline void Ins2NodeIDBatch::add_iid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_iid(value);
  // @@protoc_insertion_point(field_add:fedtree.Ins2NodeIDBatch.iid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Ins2NodeIDBatch::_internal_iid() const {
  return iid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Ins2NodeIDBatch::iid() const {
  // @@protoc_insertion_point(field_list:fedtree.Ins2NodeIDBatch.iid)
  return _internal_iid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Ins2NodeIDBatch::_internal_mutable_iid() {
  return &iid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Ins2NodeIDBatch::mutable_iid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.Ins2NodeIDBatch.iid)
  return _internal_mutable_iid();
}

// repeated int32 nid = 2 [packed = true];
inline int Ins2NodeIDBatch::_internal_nid_size() const {
  return nid_.size();
}
inline int Ins2NodeIDBatch::nid_size() const {
  return _internal_nid_size();
}
inline void Ins2NodeIDBatch::clear_nid() {
  nid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeIDBatch::_internal_nid(int index) const {
  return nid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ins2NodeIDBatch::nid(int index) const {
  // @@protoc_insertion_point(field_get:fedtree.Ins2NodeIDBatch.nid)
  return _internal_nid(index);
}
inline void Ins2NodeIDBatch::set_nid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  nid_.Set(index, value);
  // @@protoc_insertion_point(field_set:fedtree.Ins2NodeIDBatch.nid)
}
inline void Ins2NodeIDBatch::_internal_add_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  nid_.Add(value);
}
inline void Ins2NodeIDBatch::add_nid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_nid(value);
  // @@protoc_insertion_point(field_add:fedtree.Ins2NodeIDBatch.nid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Ins2NodeIDBatch::_internal_nid() const {
  return nid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Ins2NodeIDBatch::nid() const {
  // @@protoc_insertion_point(field_list:fedtree.Ins2NodeIDBatch.nid)
  return _internal_nid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Ins2NodeIDBatch::_internal_mutable_nid() {
  return &nid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Ins2NodeIDBatch::mutable_nid() {
  // @@protoc_insertion_point(field_mutable_list:fedtree.Ins2NodeIDBatch.nid)
  return _internal_mutable_nid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fedtree

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fedtree_2eproto
