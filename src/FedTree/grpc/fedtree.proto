syntax = "proto3";

package fedtree;

// after modifying this file, run these two commands in the current folder
// protoc -I ./ --grpc_out=. --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` ./fedtree.proto
// protoc -I ./ --cpp_out=. ./fedtree.proto

// A simple key-value storage service
service FedTree {
  // Provides a value for each key request
  rpc TriggerUpdateGradients (PID) returns (Ready) {}
  rpc TriggerBuildInit (PID) returns (Ready) {}
  rpc GetGradients (PID) returns (stream GHPair) {}
  rpc SendDatasetInfo (DatasetInfo) returns (PID) {}
  rpc SendHistograms (stream GHPair) returns (PID) {}
  rpc SendHistFid(stream FID) returns (PID) {}
  rpc TriggerAggregate(PID) returns (Ready) {}
  rpc GetBestInfo (PID) returns (stream BestInfo) {}
  rpc SendNode (Node) returns (PID) {}
  rpc SendIns2NodeID(stream Ins2NodeID) returns (PID) {}
  rpc GetNodes (PID) returns (stream Node) {}
  rpc GetIns2NodeID(PID) returns (stream Ins2NodeID) {}
  rpc CheckIfContinue(PID) returns (Ready) {}
  rpc TriggerPrune(PID) returns (Ready) {}
  
  rpc SendRange(stream GHPair) returns (PID) {}
  rpc TriggerCut(PID) returns (Ready) {}
  rpc GetRange(PID) returns(stream GHPair) {}
  rpc SendGH(GHPair) returns (PID) {}
  // TODO sendGHEncrypted 
  rpc TriggerBuildUsingGH(PID) returns (Ready) {}
  rpc TriggerCalcTree(PID) returns (Ready) {}
  rpc GetRootNode(PID) returns (Node);
  rpc GetSplitPoints(PID) returns (stream SplitPoint) {}
  rpc HCheckIfContinue(PID) returns (Ready) {}
  rpc ScoreReduce(Score) returns (Score) {}

  rpc TriggerHomoInit(PID) returns (Ready) {} 
  rpc GetPaillier(PID) returns (Paillier) {}
  
  rpc SendHistogramsEnc(stream GHPairEnc) returns(PID) {}
}
message GHPairEnc {
  string g_enc = 1;
  string h_enc = 2;
}

message Paillier {
  string modulus = 1;
  string generator = 2;
}

message SplitPoint {
  float gain = 1;
  float fea_missing_g = 2;
  float fea_missing_h = 3;
  float rch_sum_g = 4;
  float rch_sum_h = 5;
  bool default_right = 6;
  int32 nid = 7;
  int32 split_fea_id = 8;
  float fval = 9;
  int32 split_bid = 10;
  bool no_split_value_update = 11;
}

message Score {
  float content = 1;
}

message PID {
  int32 id = 1;
}

message Ready {
  bool ready = 1;
}

message DatasetInfo {
  int32 n_bins = 1;
  int32 n_columns = 2;
}

message GHPair {
  double g = 1;
  double h = 2;
}

message FID {
  int32 id = 1;
}

message BestInfo {
  int32 pid = 1;
  int32 nid = 2;
  int32 idx = 3;
  int32 global_fid = 4;
  double gain = 5;
}

message Node {
  int32 final_id = 1;// node id after pruning, may not equal to node index
  int32 lch_index = 2;// index of left child
  int32 rch_index = 3;// index of right child
  int32 parent_index = 4;// index of parent node
  float gain = 5;// gain of splitting this node
  float base_weight = 6;
  int32 split_feature_id = 7;
  int32 pid = 8;
  float split_value = 9;
  int32 split_bid = 10;
  bool default_right = 11;
  bool is_leaf = 12;
  bool is_valid = 13;// non-valid nodes are those that are "children" of leaf nodes
  bool is_pruned = 14;// pruned after pruning
  float sum_gh_pair_g = 15;
  float sum_gh_pair_h = 16;
  int32 n_instances = 17; // number of instances inside the node.
}

message Ins2NodeID {
  int32 iid = 1;
  int32 nid = 2;
}
