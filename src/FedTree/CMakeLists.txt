set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

file(GLOB SRC util/*.c* DP/*.c* FL/*.c* Tree/*.c* Encryption/*.c* objective/*.c* metric/*.c* *.c*)
list(REMOVE_ITEM SRC "${CMAKE_CURRENT_LIST_DIR}/main.cpp" "${CMAKE_CURRENT_LIST_DIR}/distributed_party.cpp" "${CMAKE_CURRENT_LIST_DIR}/distributed_server.cpp")


find_library(NTL_LIB ntl /usr/local/lib)
if(NOT NTL_LIB)

    message(FATAL_ERROR "ntl library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif ()
find_library(M_LIB m)
if (NOT M_LIB)
    message(FATAL_ERROR "m library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif ()
find_library(GMP_LIB gmp)
if (NOT GMP_LIB)
    message(FATAL_ERROR "gmp library not found.  Rerun cmake with -DCMAKE_PREFIX_PATH=\"<path to lib1>;<path to lib2>\"")
endif ()

set(ft_proto_srcs "grpc/fedtree.pb.cc")
set(ft_proto_hdrs "grpc/fedtree.pb.h")
set(ft_grpc_srcs "grpc/fedtree.grpc.pb.cc")
set(ft_grpc_hdrs "grpc/fedtree.grpc.pb.h")

add_library(ft_grpc_proto ${ft_grpc_srcs} ${ft_grpc_hdrs} ${ft_proto_srcs} ${ft_proto_hdrs})
target_link_libraries(ft_grpc_proto grpc++)

if (USE_CUDA)
    cuda_add_library(${PROJECT_NAME} SHARED ${SRC})
    target_link_libraries(${PROJECT_NAME} ${CUDA_cusparse_LIBRARY} ${NTL_LIB} ${M_LIB} ${GMP_LIB})
    cuda_add_executable(${PROJECT_NAME}-train main.cpp)
    cuda_add_executable(${PROJECT_NAME}-distributed-party distributed_party.cpp)
    cuda_add_executable(${PROJECT_NAME}-distributed-server distributed_server.cpp)
else ()
    add_library(${PROJECT_NAME} ${SRC})
    target_link_libraries(${PROJECT_NAME} ThrustOMP ${NTL_LIB} ${M_LIB} ${GMP_LIB})
    add_executable(${PROJECT_NAME}-train main.cpp)
    add_executable(${PROJECT_NAME}-distributed-party distributed_party.cpp)
    add_executable(${PROJECT_NAME}-distributed-server distributed_server.cpp)
endif ()
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_link_libraries(${PROJECT_NAME} OpenMP::OpenMP_CXX)
endif ()
target_link_libraries(${PROJECT_NAME}-train ${PROJECT_NAME})
foreach(_target ${PROJECT_NAME}-distributed-party ${PROJECT_NAME}-distributed-server)
    target_link_libraries(${_target} ${PROJECT_NAME})
    target_link_libraries(${_target} ft_grpc_proto)
    target_link_libraries(${_target} grpc++)
endforeach()
